Connection/Authentication	user	No		-2147483647	all versions	 The user to connect as 
Connection/Authentication	password	No		-2147483646	all versions	 The password to use when connecting 
Connection/Authentication	socketFactory	No	com.mysql.jdbc.StandardSocketFactory	4	3.0.3	 The name of the class that the driver should use for creating socket connections to the server. This class must implement the interface 'com.mysql.jdbc.SocketFactory' and have public no-args constructor. 
Connection/Authentication	connectTimeout	No	0	9	3.0.1	 Timeout for socket connect (in milliseconds), with 0 being no timeout. Only works on JDK-1.4 or newer. Defaults to '0'. 
Connection/Authentication	socketTimeout	No	0	10	3.0.1	 Timeout (in milliseconds) on network socket operations (0, the default means no timeout). 
Connection/Authentication	connectionLifecycleInterceptors	No		2147483647	5.1.4	 A comma-delimited list of classes that implement "com.mysql.jdbc.ConnectionLifecycleInterceptor" that should notified of connection lifecycle events (creation, destruction, commit, rollback, setCatalog and setAutoCommit) and potentially alter the execution of these commands. ConnectionLifecycleInterceptors are "stackable", more than one interceptor may be specified via the configuration property as a comma-delimited list, with the interceptors executed in order from left to right. 
Connection/Authentication	useConfigs	No		2147483647	3.1.5	 Load the comma-delimited list of configuration properties before parsing the URL or applying user-specified properties. These configurations are explained in the 'Configurations' of the documentation. 
Connection/Authentication	authenticationPlugins	No		alpha	5.1.19	 Comma-delimited list of classes that implement com.mysql.jdbc.AuthenticationPlugin and which will be used for authentication unless disabled by "disabledAuthenticationPlugins" property. 
Connection/Authentication	defaultAuthenticationPlugin	No	com.mysql.jdbc.authentication.MysqlNativePasswordPlugin	alpha	5.1.19	 Name of a class implementing com.mysql.jdbc.AuthenticationPlugin which will be used as the default authentication plugin (see below). It is an error to use a class which is not listed in "authenticationPlugins" nor it is one of the built-in plugins. It is an error to set as default a plugin which was disabled with "disabledAuthenticationPlugins" property. It is an error to set this value to null or the empty string (i.e. there must be at least a valid default authentication plugin specified for the connection, meeting all constraints listed above). 
Connection/Authentication	disabledAuthenticationPlugins	No		alpha	5.1.19	 Comma-delimited list of classes implementing com.mysql.jdbc.AuthenticationPlugin or mechanisms, i.e. "mysql_native_password". The authentication plugins or mechanisms listed will not be used for authentication which will fail if it requires one of them. It is an error to disable the default authentication plugin (either the one named by "defaultAuthenticationPlugin" property or the hard-coded one if "defaultAuthenticationPlugin" property is not set). 
Connection/Authentication	disconnectOnExpiredPasswords	No	true	alpha	5.1.23	 If "disconnectOnExpiredPasswords" is set to "false" and password is expired then server enters "sandbox" mode and sends ERR(08001, ER_MUST_CHANGE_PASSWORD) for all commands that are not needed to set a new password until a new password is set. 
Connection/Authentication	interactiveClient	No	false	alpha	3.1.0	 Set the CLIENT_INTERACTIVE flag, which tells MySQL to timeout connections based on INTERACTIVE_TIMEOUT instead of WAIT_TIMEOUT 
Connection/Authentication	localSocketAddress	No		alpha	5.0.5	 Hostname or IP address given to explicitly configure the interface that the driver will bind the client side of the TCP/IP connection to when connecting. 
Connection/Authentication	propertiesTransform	No		alpha	3.1.4	 An implementation of com.mysql.jdbc.ConnectionPropertiesTransform that the driver will use to modify URL properties passed to the driver before attempting a connection 
Connection/Authentication	useCompression	No	false	alpha	3.0.17	 Use zlib compression when communicating with the server (true/false)? Defaults to 'false'. 
Connection/Authentication	socksProxyHost	No		1	5.1.34	 Name or IP address of SOCKS host to connect through. 
Connection/Authentication	socksProxyPort	No	1080	2	5.1.34	 Port of SOCKS server. 
Connection/Authentication	maxAllowedPacket	No	-1	alpha	5.1.8	 Maximum allowed packet size to send to server. If not set, the value of system variable 'max_allowed_packet' will be used to initialize this upon connecting. This value will not take effect if set larger than the value of 'max_allowed_packet'. Also, due to an internal dependency with the property "blobSendChunkSize", this setting has a minimum value of "8203" if "useServerPrepStmts" is set to "true". 
Connection/Authentication	tcpKeepAlive	No	true	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_KEEPALIVE? 
Connection/Authentication	tcpNoDelay	No	true	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_TCP_NODELAY (disabling the Nagle Algorithm)? 
Connection/Authentication	tcpRcvBuf	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_RCV_BUF to the given value? The default value of '0', means use the platform default value for this property) 
Connection/Authentication	tcpSndBuf	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_SND_BUF to the given value? The default value of '0', means use the platform default value for this property) 
Connection/Authentication	tcpTrafficClass	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set traffic class or type-of-service fields ?See the documentation for java.net.Socket.setTrafficClass() for more information. 
Connection/Authentication	autoReconnect	No	false	0	1.1	 Should the driver try to re-establish stale and/or dead connections? If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. The use of this feature is not recommended, because it has side effects related to session state and data consistency when applications don't handle SQLExceptions properly, and is only designed to be used when you are unable to configure your application to handle SQLExceptions resulting from dead and stale connections properly. Alternatively, as a last option, investigate setting the MySQL server variable "wait_timeout" to a high value, rather than the default of 8 hours. 
Connection/Authentication	autoReconnectForPools	No	false	1	3.1.3	 Use a reconnection strategy appropriate for connection pools (defaults to 'false') 
Connection/Authentication	failOverReadOnly	No	true	2	3.0.12	 When failing over in autoReconnect mode, should the connection be set to 'read-only'? 
Connection/Authentication	maxReconnects	No	3	4	1.1	 Maximum number of reconnects to attempt if autoReconnect is true, default is '3'. 
Connection/Authentication	reconnectAtTxEnd	No	false	4	3.0.10	 If autoReconnect is set to true, should the driver attempt reconnections at the end of every transaction? 
Connection/Authentication	retriesAllDown	No	120	4	5.1.6	 When using loadbalancing or failover, the number of times the driver should cycle through available hosts, attempting to connect. Between cycles, the driver will pause for 250ms if no servers are available. 
Connection/Authentication	initialTimeout	No	2	5	1.1	 If autoReconnect is enabled, the initial time to wait between re-connect attempts (in seconds, defaults to '2'). 
Connection/Authentication	roundRobinLoadBalance	No	false	5	3.1.2	 When autoReconnect is enabled, and failoverReadonly is false, should we pick hosts to connect to on a round-robin basis? 
Connection/Authentication	queriesBeforeRetryMaster	No	50	7	3.0.2	 Number of queries to issue before falling back to the primary host when failed over (when using multi-host failover). Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the primary host. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Defaults to 50. 
Connection/Authentication	secondsBeforeRetryMaster	No	30	8	3.0.2	 How long should the driver wait, when failed over, before attempting to reconnect to the primary host? Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the master. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Time in seconds, defaults to 30 
Connection/Authentication	allowMasterDownConnections	No	false	2147483647	5.1.27	 By default, a replication-aware connection will fail to connect when configured master hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection, by failing over to the slave servers, in read-only state. It won't prevent subsequent failures when switching back to the master hosts i.e. by setting the replication connection to read/write state. 
Connection/Authentication	allowSlaveDownConnections	No	false	2147483647	5.1.38	 By default, a replication-aware connection will fail to connect when configured slave hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection. It won't prevent failures when switching to slaves i.e. by setting the replication connection to read-only state. The property 'readFromMasterWhenNoSlaves' should be used for this purpose. 
Connection/Authentication	readFromMasterWhenNoSlaves	No	false	2147483647	5.1.38	 Replication-aware connections distribute load by using the master hosts when in read/write state and by using the slave hosts when in read-only state. If, when setting the connection to read-only state, none of the slave hosts are available, an SQLExeception is thrown back. Setting this property to 'true' allows to fail over to the master hosts, while setting the connection state to read-only, when no slave hosts are available at switch instant. 
Connection/Authentication	replicationEnableJMX	No	false	2147483647	5.1.27	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Connection/Authentication	selfDestructOnPingMaxOperations	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will report close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's count of commands sent to the server exceeds this value. 
Connection/Authentication	selfDestructOnPingSecondsLifetime	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's lifetime exceeds this value (in milliseconds). 
Connection/Authentication	replicationConnectionGroup	No		alpha	5.1.27	 Logical group of replication connections within a classloader, used to manage different groups independently. If not specified, live management of replication connections is disabled. 
Connection/Authentication	resourceId	No		alpha	5.0.1	 A globally unique name that identifies the resource that this datasource or connection is connected to, used for XAResource.isSameRM() when the driver can't determine this value based on hostnames used in the URL 
Connection/Authentication	allowMultiQueries	No	false	1	3.1.1	 Allow the use of ';' to delimit multiple queries during one statement (true/false), defaults to 'false', and does not affect the addBatch() and executeBatch() methods, which instead rely on rewriteBatchStatements. 
Connection/Authentication	useSSL	No	false	2	3.0.2	 Use SSL when communicating with the server (true/false), default is 'true' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is 'false' 
Connection/Authentication	requireSSL	No	false	3	3.1.0	 Require server support of SSL connection if useSSL=true? (defaults to 'false'). 
Connection/Authentication	verifyServerCertificate	No	true	4	5.1.6	 If "useSSL" is set to "true", should the driver verify the server's certificate? When using this feature, the keystore parameters should be specified by the "clientCertificateKeyStore*" properties, rather than system properties. Default is 'false' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+ and "useSSL" was not explicitly set to "true". Otherwise default is 'true' 
Connection/Authentication	clientCertificateKeyStoreUrl	No		5	5.1.0	 URL to the client certificate KeyStore (if not specified, use defaults) 
Connection/Authentication	clientCertificateKeyStoreType	No	JKS	6	5.1.0	 KeyStore type for client certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Connection/Authentication	clientCertificateKeyStorePassword	No		7	5.1.0	 Password for the client certificates KeyStore 
Connection/Authentication	trustCertificateKeyStoreUrl	No		8	5.1.0	 URL to the trusted root certificate KeyStore (if not specified, use defaults) 
Connection/Authentication	trustCertificateKeyStoreType	No	JKS	9	5.1.0	 KeyStore type for trusted root certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Connection/Authentication	trustCertificateKeyStorePassword	No		10	5.1.0	 Password for the trusted root certificates KeyStore 
Connection/Authentication	enabledSSLCipherSuites	No		11	5.1.35	 If "useSSL" is set to "true", overrides the cipher suites enabled for use on the underlying SSL sockets. This may be required when using external JSSE providers or to specify cipher suites compatible with both MySQL server and used JVM. 
Connection/Authentication	enabledTLSProtocols	No		12	5.1.44	 If "useSSL" is set to "true", overrides the TLS protocols enabled for use on the underlying SSL sockets. This may be used to restrict connections to specific TLS versions. 
Connection/Authentication	allowLoadLocalInfile	No	true	2147483647	3.0.3	 Should the driver allow use of 'LOAD DATA LOCAL INFILE...' (defaults to 'true'). 
Connection/Authentication	allowUrlInLocalInfile	No	false	2147483647	3.1.4	 Should the driver allow URLs in 'LOAD DATA LOCAL INFILE' statements? 
Connection/Authentication	allowPublicKeyRetrieval	No	false	alpha	5.1.31	 Allows special handshake roundtrip to get server RSA public key directly from server. 
Connection/Authentication	paranoid	No	false	alpha	3.0.1	 Take measures to prevent exposure sensitive information in error messages and clear data structures holding sensitive data when possible? (defaults to 'false') 
Connection/Authentication	passwordCharacterEncoding	No		alpha	5.1.7	 What character encoding is used for passwords? Leaving this set to the default value (null), uses the value set in "characterEncoding" if there is one, otherwise uses UTF-8 as default encoding. If the password contains non-ASCII characters, the password encoding must match what server encoding was set to when the password was created. For passwords in other character encodings, the encoding will have to be specified with this property (or with "characterEncoding"), as it's not possible for the driver to auto-detect this. 
Connection/Authentication	serverRSAPublicKeyFile	No		alpha	5.1.31	 File path to the server RSA public key file for sha256_password authentication. If not specified, the public key will be retrieved from the server. 
Connection/Authentication	callableStmtCacheSize	No	100	5	3.1.2	 If 'cacheCallableStmts' is enabled, how many callable statements should be cached? 
Connection/Authentication	metadataCacheSize	No	50	5	3.1.1	 The number of queries to cache ResultSetMetadata for if cacheResultSetMetaData is set to 'true' (default 50) 
Connection/Authentication	useLocalSessionState	No	false	5	3.1.7	 Should the driver refer to the internal values of autocommit and transaction isolation that are set by Connection.setAutoCommit() and Connection.setTransactionIsolation() and transaction state as maintained by the protocol, rather than querying the database or blindly sending commands to the database for commit() or rollback() method calls? 
Connection/Authentication	useLocalTransactionState	No	false	6	5.1.7	 Should the driver use the in-transaction state provided by the MySQL protocol to determine if a commit() or rollback() should actually be sent to the database? 
Connection/Authentication	prepStmtCacheSize	No	25	10	3.0.10	 If prepared statement caching is enabled, how many prepared statements should be cached? 
Connection/Authentication	prepStmtCacheSqlLimit	No	256	11	3.0.10	 If prepared statement caching is enabled, what's the largest SQL the driver will cache the parsing for? 
Connection/Authentication	parseInfoCacheFactory	No	com.mysql.jdbc.PerConnectionLRUFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory, which will be used to create caches for the parsed representation of client-side prepared statements. 
Connection/Authentication	serverConfigCacheFactory	No	com.mysql.jdbc.PerVmServerConfigCacheFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory&lt;String, Map&lt;String, String&gt;&gt;, which will be used to create caches for MySQL server configuration values 
Connection/Authentication	alwaysSendSetIsolation	No	true	2147483647	3.1.7	 Should the driver always communicate with the database when Connection.setTransactionIsolation() is called? If set to false, the driver will only communicate with the database when the requested transaction isolation is different than the whichever is newer, the last value that was set via Connection.setTransactionIsolation(), or the value that was read from the server when the connection was established. Note that useLocalSessionState=true will force the same behavior as alwaysSendSetIsolation=false, regardless of how alwaysSendSetIsolation is set. 
Connection/Authentication	maintainTimeStats	No	true	2147483647	3.1.9	 Should the driver maintain various internal timers to enable idle time calculations as well as more verbose error messages when the connection to the server fails? Setting this property to false removes at least two calls to System.getCurrentTimeMillis() per query. 
Connection/Authentication	useCursorFetch	No	false	2147483647	5.0.0	 If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows? 
Connection/Authentication	blobSendChunkSize	No	1048576	alpha	3.1.9	 Chunk size to use when sending BLOB/CLOBs via ServerPreparedStatements. Note that this value cannot exceed the value of "maxAllowedPacket" and, if that is the case, then this value will be corrected automatically. 
Connection/Authentication	cacheCallableStmts	No	false	alpha	3.1.2	 Should the driver cache the parsing stage of CallableStatements 
Connection/Authentication	cachePrepStmts	No	false	alpha	3.0.10	 Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves? 
Connection/Authentication	cacheResultSetMetadata	No	false	alpha	3.1.1	 Should the driver cache ResultSetMetaData for Statements and PreparedStatements? (Req. JDK-1.4+, true/false, default 'false') 
Connection/Authentication	cacheServerConfiguration	No	false	alpha	3.1.5	 Should the driver cache the results of 'SHOW VARIABLES' and 'SHOW COLLATION' on a per-URL basis? 
Connection/Authentication	defaultFetchSize	No	0	alpha	3.1.9	 The driver will call setFetchSize(n) with this value on all newly-created Statements 
Connection/Authentication	dontCheckOnDuplicateKeyUpdateInSQL	No	false	alpha	5.1.32	 Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement's generated keys information will return a list where normally it wouldn't. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with 'rewriteBatchedStatements=true'. 
Connection/Authentication	dontTrackOpenResources	No	false	alpha	3.1.7	 The JDBC specification requires the driver to automatically track and close resources, however if your application doesn't do a good job of explicitly calling close() on statements or result sets, this can cause memory leakage. Setting this property to true relaxes this constraint, and can be more memory efficient for some applications. Also the automatic closing of the Statement and current ResultSet in Statement.closeOnCompletion() and Statement.getMoreResults ([Statement.CLOSE_CURRENT_RESULT | Statement.CLOSE_ALL_RESULTS]), respectively, ceases to happen. This property automatically sets holdResultsOpenOverStatementClose=true. 
Connection/Authentication	dynamicCalendars	No	false	alpha	3.1.5	 Should the driver retrieve the default calendar when required, or cache it per connection/session? 
Connection/Authentication	elideSetAutoCommits	No	false	alpha	3.1.3	 If using MySQL-4.1 or newer, should the driver only issue 'set autocommit=n' queries when the server's state doesn't match the requested state by Connection.setAutoCommit(boolean)? 
Connection/Authentication	enableEscapeProcessing	No	true	alpha	5.1.37	 Sets the default escape processing behavior for Statement objects. The method Statement.setEscapeProcessing() can be used to specify the escape processing behavior for an individual Statement object. Default escape processing behavior in prepared statements must be defined with the property 'processEscapeCodesForPrepStmts'. 
Connection/Authentication	enableQueryTimeouts	No	true	alpha	5.0.6	 When enabled, query timeouts set via Statement.setQueryTimeout() use a shared java.util.Timer instance for scheduling. Even if the timeout doesn't expire before the query is processed, there will be memory used by the TimerTask for the given timeout which won't be reclaimed until the time the timeout would have expired if it hadn't been cancelled by the driver. High-load environments might want to consider disabling this functionality. 
Connection/Authentication	holdResultsOpenOverStatementClose	No	false	alpha	3.1.7	 Should the driver close result sets on Statement.close() as required by the JDBC specification? 
Connection/Authentication	largeRowSizeThreshold	No	2048	alpha	5.1.1	 What size result set row should the JDBC driver consider "large", and thus use a more memory-efficient way of representing the row internally? 
Connection/Authentication	loadBalanceStrategy	No	random	alpha	5.0.6	 If using a load-balanced connection to connect to SQL nodes in a MySQL Cluster/NDB configuration (by using the URL prefix "jdbc:mysql:loadbalance://"), which load balancing algorithm should the driver use: (1) "random" - the driver will pick a random host for each request. This tends to work better than round-robin, as the randomness will somewhat account for spreading loads where requests vary in response time, while round-robin can sometimes lead to overloaded nodes if there are variations in response times across the workload. (2) "bestResponseTime" - the driver will route the request to the host that had the best response time for the previous transaction. (3) "serverAffinity" - the driver initially attempts to enforce server affinity while still respecting and benefiting from the fault tolerance aspects of the load-balancing implementation. The server affinity ordered list is provided using the property 'serverAffinityOrder'. If none of the servers listed in the affinity list is responsive, the driver then refers to the "random" strategy to proceed with choosing the next server. 
Connection/Authentication	locatorFetchBufferSize	No	1048576	alpha	3.2.1	 If 'emulateLocators' is configured to 'true', what size buffer should be used when fetching BLOB data for getBinaryInputStream? 
Connection/Authentication	readOnlyPropagatesToServer	No	true	alpha	5.1.35	 Should the driver issue appropriate statements to implicitly set the transaction access mode on server side when Connection.setReadOnly() is called? Setting this property to 'true' enables InnoDB read-only potential optimizations but also requires an extra roundtrip to set the right transaction state. Even if this property is set to 'false', the driver will do its best effort to prevent the execution of database-state-changing queries. Requires minimum of MySQL 5.6. 
Connection/Authentication	rewriteBatchedStatements	No	false	alpha	3.1.13	 Should the driver use multiqueries (irregardless of the setting of "allowMultiQueries") as well as rewriting of prepared statements for INSERT into multi-value inserts when executeBatch() is called? Notice that this has the potential for SQL injection if using plain java.sql.Statements and your code doesn't sanitize input correctly. Notice that for prepared statements, server-side prepared statements can not currently take advantage of this rewrite option, and that if you don't specify stream lengths when using PreparedStatement.set*Stream(), the driver won't be able to determine the optimum number of parameters per batch and you might receive an error from the driver that the resultant packet is too large. Statement.getGeneratedKeys() for these rewritten statements only works when the entire batch includes INSERT statements. Please be aware using rewriteBatchedStatements=true with INSERT .. ON DUPLICATE KEY UPDATE that for rewritten statement server returns only one value as sum of all affected (or found) rows in batch and it isn't possible to map it correctly to initial statements; in this case driver returns 0 as a result of each batch statement if total count was 0, and the Statement.SUCCESS_NO_INFO as a result of each batch statement if total count was &gt; 0. 
Connection/Authentication	serverAffinityOrder	No		alpha	5.1.43	 A comma separated list containing the host/port pairs that are to be used in load-balancing "serverAffinity" strategy. Only the sub-set of the hosts enumerated in the main hosts section in this URL will be used and they must be identical in case and type, i.e., can't use an IP address in one place and the corresponding host name in the other. 
Connection/Authentication	useDirectRowUnpack	No	true	alpha	5.1.1	 Use newer result set row unpacking code that skips a copy from network buffers to a MySQL packet instance and instead reads directly into the result set row data buffers. 
Connection/Authentication	useDynamicCharsetInfo	No	true	alpha	5.0.6	 Should the driver use a per-connection cache of character set information queried from the server when necessary, or use a built-in static mapping that is more efficient, but isn't aware of custom character sets or character sets implemented after the release of the JDBC driver? 
Connection/Authentication	useFastDateParsing	No	true	alpha	5.0.5	 Use internal String-&gt;Date/Time/Timestamp conversion routines to avoid excessive object creation? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Connection/Authentication	useFastIntParsing	No	true	alpha	3.1.4	 Use internal String-&gt;Integer conversion routines to avoid excessive object creation? 
Connection/Authentication	useJvmCharsetConverters	No	false	alpha	5.0.1	 Always use the character encoding routines built into the JVM, rather than using lookup tables for single-byte character sets? 
Connection/Authentication	useReadAheadInput	No	true	alpha	3.1.5	 Use newer, optimized non-blocking, buffered input stream when reading from the server? 
Connection/Authentication	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
Connection/Authentication	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
Connection/Authentication	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
Connection/Authentication	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
Connection/Authentication	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
Connection/Authentication	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
Connection/Authentication	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
Connection/Authentication	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
Connection/Authentication	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
Connection/Authentication	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
Connection/Authentication	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
Connection/Authentication	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
Connection/Authentication	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
Connection/Authentication	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
Connection/Authentication	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
Connection/Authentication	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
Connection/Authentication	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
Connection/Authentication	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
Connection/Authentication	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
Connection/Authentication	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
Connection/Authentication	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
Connection/Authentication	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
Connection/Authentication	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
Connection/Authentication	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
Connection/Authentication	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
Connection/Authentication	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
Connection/Authentication	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Connection/Authentication	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Connection/Authentication	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Connection/Authentication	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Connection/Authentication	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Connection/Authentication	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Connection/Authentication	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Connection/Authentication	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Connection/Authentication	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Connection/Authentication	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Connection/Authentication	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Connection/Authentication	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Connection/Authentication	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Connection/Authentication	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Connection/Authentication	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Connection/Authentication	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Connection/Authentication	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Connection/Authentication	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Connection/Authentication	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Connection/Authentication	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Connection/Authentication	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Connection/Authentication	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Connection/Authentication	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Connection/Authentication	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Connection/Authentication	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Connection/Authentication	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Connection/Authentication	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Connection/Authentication	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Connection/Authentication	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Connection/Authentication	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Connection/Authentication	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Connection/Authentication	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Connection/Authentication	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Connection/Authentication	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Connection/Authentication	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Connection/Authentication	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Connection/Authentication	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Connection/Authentication	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Connection/Authentication	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Connection/Authentication	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Connection/Authentication	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Connection/Authentication	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Connection/Authentication	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Connection/Authentication	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Connection/Authentication	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Connection/Authentication	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Connection/Authentication	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Connection/Authentication	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Connection/Authentication	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Connection/Authentication	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Connection/Authentication	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Connection/Authentication	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Connection/Authentication	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Connection/Authentication	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Connection/Authentication	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Connection/Authentication	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Connection/Authentication	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Connection/Authentication	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Connection/Authentication	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Connection/Authentication	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Connection/Authentication	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Connection/Authentication	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Connection/Authentication	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Connection/Authentication	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Connection/Authentication	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Connection/Authentication	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Connection/Authentication	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Connection/Authentication	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Connection/Authentication	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Connection/Authentication	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Connection/Authentication	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Connection/Authentication	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Connection/Authentication	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Connection/Authentication	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Connection/Authentication	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Connection/Authentication	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Connection/Authentication	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Connection/Authentication	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Connection/Authentication	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Connection/Authentication	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Connection/Authentication	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Connection/Authentication	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Connection/Authentication	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Connection/Authentication	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Connection/Authentication	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Connection/Authentication	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Connection/Authentication	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
Networking	socksProxyHost	No		1	5.1.34	 Name or IP address of SOCKS host to connect through. 
Networking	socksProxyPort	No	1080	2	5.1.34	 Port of SOCKS server. 
Networking	maxAllowedPacket	No	-1	alpha	5.1.8	 Maximum allowed packet size to send to server. If not set, the value of system variable 'max_allowed_packet' will be used to initialize this upon connecting. This value will not take effect if set larger than the value of 'max_allowed_packet'. Also, due to an internal dependency with the property "blobSendChunkSize", this setting has a minimum value of "8203" if "useServerPrepStmts" is set to "true". 
Networking	tcpKeepAlive	No	true	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_KEEPALIVE? 
Networking	tcpNoDelay	No	true	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_TCP_NODELAY (disabling the Nagle Algorithm)? 
Networking	tcpRcvBuf	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_RCV_BUF to the given value? The default value of '0', means use the platform default value for this property) 
Networking	tcpSndBuf	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set SO_SND_BUF to the given value? The default value of '0', means use the platform default value for this property) 
Networking	tcpTrafficClass	No	0	alpha	5.0.7	 If connecting using TCP/IP, should the driver set traffic class or type-of-service fields ?See the documentation for java.net.Socket.setTrafficClass() for more information. 
Networking	autoReconnect	No	false	0	1.1	 Should the driver try to re-establish stale and/or dead connections? If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. The use of this feature is not recommended, because it has side effects related to session state and data consistency when applications don't handle SQLExceptions properly, and is only designed to be used when you are unable to configure your application to handle SQLExceptions resulting from dead and stale connections properly. Alternatively, as a last option, investigate setting the MySQL server variable "wait_timeout" to a high value, rather than the default of 8 hours. 
Networking	autoReconnectForPools	No	false	1	3.1.3	 Use a reconnection strategy appropriate for connection pools (defaults to 'false') 
Networking	failOverReadOnly	No	true	2	3.0.12	 When failing over in autoReconnect mode, should the connection be set to 'read-only'? 
Networking	maxReconnects	No	3	4	1.1	 Maximum number of reconnects to attempt if autoReconnect is true, default is '3'. 
Networking	reconnectAtTxEnd	No	false	4	3.0.10	 If autoReconnect is set to true, should the driver attempt reconnections at the end of every transaction? 
Networking	retriesAllDown	No	120	4	5.1.6	 When using loadbalancing or failover, the number of times the driver should cycle through available hosts, attempting to connect. Between cycles, the driver will pause for 250ms if no servers are available. 
Networking	initialTimeout	No	2	5	1.1	 If autoReconnect is enabled, the initial time to wait between re-connect attempts (in seconds, defaults to '2'). 
Networking	roundRobinLoadBalance	No	false	5	3.1.2	 When autoReconnect is enabled, and failoverReadonly is false, should we pick hosts to connect to on a round-robin basis? 
Networking	queriesBeforeRetryMaster	No	50	7	3.0.2	 Number of queries to issue before falling back to the primary host when failed over (when using multi-host failover). Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the primary host. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Defaults to 50. 
Networking	secondsBeforeRetryMaster	No	30	8	3.0.2	 How long should the driver wait, when failed over, before attempting to reconnect to the primary host? Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the master. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Time in seconds, defaults to 30 
Networking	allowMasterDownConnections	No	false	2147483647	5.1.27	 By default, a replication-aware connection will fail to connect when configured master hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection, by failing over to the slave servers, in read-only state. It won't prevent subsequent failures when switching back to the master hosts i.e. by setting the replication connection to read/write state. 
Networking	allowSlaveDownConnections	No	false	2147483647	5.1.38	 By default, a replication-aware connection will fail to connect when configured slave hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection. It won't prevent failures when switching to slaves i.e. by setting the replication connection to read-only state. The property 'readFromMasterWhenNoSlaves' should be used for this purpose. 
Networking	readFromMasterWhenNoSlaves	No	false	2147483647	5.1.38	 Replication-aware connections distribute load by using the master hosts when in read/write state and by using the slave hosts when in read-only state. If, when setting the connection to read-only state, none of the slave hosts are available, an SQLExeception is thrown back. Setting this property to 'true' allows to fail over to the master hosts, while setting the connection state to read-only, when no slave hosts are available at switch instant. 
Networking	replicationEnableJMX	No	false	2147483647	5.1.27	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Networking	selfDestructOnPingMaxOperations	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will report close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's count of commands sent to the server exceeds this value. 
Networking	selfDestructOnPingSecondsLifetime	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's lifetime exceeds this value (in milliseconds). 
Networking	replicationConnectionGroup	No		alpha	5.1.27	 Logical group of replication connections within a classloader, used to manage different groups independently. If not specified, live management of replication connections is disabled. 
Networking	resourceId	No		alpha	5.0.1	 A globally unique name that identifies the resource that this datasource or connection is connected to, used for XAResource.isSameRM() when the driver can't determine this value based on hostnames used in the URL 
Networking	allowMultiQueries	No	false	1	3.1.1	 Allow the use of ';' to delimit multiple queries during one statement (true/false), defaults to 'false', and does not affect the addBatch() and executeBatch() methods, which instead rely on rewriteBatchStatements. 
Networking	useSSL	No	false	2	3.0.2	 Use SSL when communicating with the server (true/false), default is 'true' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is 'false' 
Networking	requireSSL	No	false	3	3.1.0	 Require server support of SSL connection if useSSL=true? (defaults to 'false'). 
Networking	verifyServerCertificate	No	true	4	5.1.6	 If "useSSL" is set to "true", should the driver verify the server's certificate? When using this feature, the keystore parameters should be specified by the "clientCertificateKeyStore*" properties, rather than system properties. Default is 'false' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+ and "useSSL" was not explicitly set to "true". Otherwise default is 'true' 
Networking	clientCertificateKeyStoreUrl	No		5	5.1.0	 URL to the client certificate KeyStore (if not specified, use defaults) 
Networking	clientCertificateKeyStoreType	No	JKS	6	5.1.0	 KeyStore type for client certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Networking	clientCertificateKeyStorePassword	No		7	5.1.0	 Password for the client certificates KeyStore 
Networking	trustCertificateKeyStoreUrl	No		8	5.1.0	 URL to the trusted root certificate KeyStore (if not specified, use defaults) 
Networking	trustCertificateKeyStoreType	No	JKS	9	5.1.0	 KeyStore type for trusted root certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Networking	trustCertificateKeyStorePassword	No		10	5.1.0	 Password for the trusted root certificates KeyStore 
Networking	enabledSSLCipherSuites	No		11	5.1.35	 If "useSSL" is set to "true", overrides the cipher suites enabled for use on the underlying SSL sockets. This may be required when using external JSSE providers or to specify cipher suites compatible with both MySQL server and used JVM. 
Networking	enabledTLSProtocols	No		12	5.1.44	 If "useSSL" is set to "true", overrides the TLS protocols enabled for use on the underlying SSL sockets. This may be used to restrict connections to specific TLS versions. 
Networking	allowLoadLocalInfile	No	true	2147483647	3.0.3	 Should the driver allow use of 'LOAD DATA LOCAL INFILE...' (defaults to 'true'). 
Networking	allowUrlInLocalInfile	No	false	2147483647	3.1.4	 Should the driver allow URLs in 'LOAD DATA LOCAL INFILE' statements? 
Networking	allowPublicKeyRetrieval	No	false	alpha	5.1.31	 Allows special handshake roundtrip to get server RSA public key directly from server. 
Networking	paranoid	No	false	alpha	3.0.1	 Take measures to prevent exposure sensitive information in error messages and clear data structures holding sensitive data when possible? (defaults to 'false') 
Networking	passwordCharacterEncoding	No		alpha	5.1.7	 What character encoding is used for passwords? Leaving this set to the default value (null), uses the value set in "characterEncoding" if there is one, otherwise uses UTF-8 as default encoding. If the password contains non-ASCII characters, the password encoding must match what server encoding was set to when the password was created. For passwords in other character encodings, the encoding will have to be specified with this property (or with "characterEncoding"), as it's not possible for the driver to auto-detect this. 
Networking	serverRSAPublicKeyFile	No		alpha	5.1.31	 File path to the server RSA public key file for sha256_password authentication. If not specified, the public key will be retrieved from the server. 
Networking	callableStmtCacheSize	No	100	5	3.1.2	 If 'cacheCallableStmts' is enabled, how many callable statements should be cached? 
Networking	metadataCacheSize	No	50	5	3.1.1	 The number of queries to cache ResultSetMetadata for if cacheResultSetMetaData is set to 'true' (default 50) 
Networking	useLocalSessionState	No	false	5	3.1.7	 Should the driver refer to the internal values of autocommit and transaction isolation that are set by Connection.setAutoCommit() and Connection.setTransactionIsolation() and transaction state as maintained by the protocol, rather than querying the database or blindly sending commands to the database for commit() or rollback() method calls? 
Networking	useLocalTransactionState	No	false	6	5.1.7	 Should the driver use the in-transaction state provided by the MySQL protocol to determine if a commit() or rollback() should actually be sent to the database? 
Networking	prepStmtCacheSize	No	25	10	3.0.10	 If prepared statement caching is enabled, how many prepared statements should be cached? 
Networking	prepStmtCacheSqlLimit	No	256	11	3.0.10	 If prepared statement caching is enabled, what's the largest SQL the driver will cache the parsing for? 
Networking	parseInfoCacheFactory	No	com.mysql.jdbc.PerConnectionLRUFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory, which will be used to create caches for the parsed representation of client-side prepared statements. 
Networking	serverConfigCacheFactory	No	com.mysql.jdbc.PerVmServerConfigCacheFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory&lt;String, Map&lt;String, String&gt;&gt;, which will be used to create caches for MySQL server configuration values 
Networking	alwaysSendSetIsolation	No	true	2147483647	3.1.7	 Should the driver always communicate with the database when Connection.setTransactionIsolation() is called? If set to false, the driver will only communicate with the database when the requested transaction isolation is different than the whichever is newer, the last value that was set via Connection.setTransactionIsolation(), or the value that was read from the server when the connection was established. Note that useLocalSessionState=true will force the same behavior as alwaysSendSetIsolation=false, regardless of how alwaysSendSetIsolation is set. 
Networking	maintainTimeStats	No	true	2147483647	3.1.9	 Should the driver maintain various internal timers to enable idle time calculations as well as more verbose error messages when the connection to the server fails? Setting this property to false removes at least two calls to System.getCurrentTimeMillis() per query. 
Networking	useCursorFetch	No	false	2147483647	5.0.0	 If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows? 
Networking	blobSendChunkSize	No	1048576	alpha	3.1.9	 Chunk size to use when sending BLOB/CLOBs via ServerPreparedStatements. Note that this value cannot exceed the value of "maxAllowedPacket" and, if that is the case, then this value will be corrected automatically. 
Networking	cacheCallableStmts	No	false	alpha	3.1.2	 Should the driver cache the parsing stage of CallableStatements 
Networking	cachePrepStmts	No	false	alpha	3.0.10	 Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves? 
Networking	cacheResultSetMetadata	No	false	alpha	3.1.1	 Should the driver cache ResultSetMetaData for Statements and PreparedStatements? (Req. JDK-1.4+, true/false, default 'false') 
Networking	cacheServerConfiguration	No	false	alpha	3.1.5	 Should the driver cache the results of 'SHOW VARIABLES' and 'SHOW COLLATION' on a per-URL basis? 
Networking	defaultFetchSize	No	0	alpha	3.1.9	 The driver will call setFetchSize(n) with this value on all newly-created Statements 
Networking	dontCheckOnDuplicateKeyUpdateInSQL	No	false	alpha	5.1.32	 Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement's generated keys information will return a list where normally it wouldn't. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with 'rewriteBatchedStatements=true'. 
Networking	dontTrackOpenResources	No	false	alpha	3.1.7	 The JDBC specification requires the driver to automatically track and close resources, however if your application doesn't do a good job of explicitly calling close() on statements or result sets, this can cause memory leakage. Setting this property to true relaxes this constraint, and can be more memory efficient for some applications. Also the automatic closing of the Statement and current ResultSet in Statement.closeOnCompletion() and Statement.getMoreResults ([Statement.CLOSE_CURRENT_RESULT | Statement.CLOSE_ALL_RESULTS]), respectively, ceases to happen. This property automatically sets holdResultsOpenOverStatementClose=true. 
Networking	dynamicCalendars	No	false	alpha	3.1.5	 Should the driver retrieve the default calendar when required, or cache it per connection/session? 
Networking	elideSetAutoCommits	No	false	alpha	3.1.3	 If using MySQL-4.1 or newer, should the driver only issue 'set autocommit=n' queries when the server's state doesn't match the requested state by Connection.setAutoCommit(boolean)? 
Networking	enableEscapeProcessing	No	true	alpha	5.1.37	 Sets the default escape processing behavior for Statement objects. The method Statement.setEscapeProcessing() can be used to specify the escape processing behavior for an individual Statement object. Default escape processing behavior in prepared statements must be defined with the property 'processEscapeCodesForPrepStmts'. 
Networking	enableQueryTimeouts	No	true	alpha	5.0.6	 When enabled, query timeouts set via Statement.setQueryTimeout() use a shared java.util.Timer instance for scheduling. Even if the timeout doesn't expire before the query is processed, there will be memory used by the TimerTask for the given timeout which won't be reclaimed until the time the timeout would have expired if it hadn't been cancelled by the driver. High-load environments might want to consider disabling this functionality. 
Networking	holdResultsOpenOverStatementClose	No	false	alpha	3.1.7	 Should the driver close result sets on Statement.close() as required by the JDBC specification? 
Networking	largeRowSizeThreshold	No	2048	alpha	5.1.1	 What size result set row should the JDBC driver consider "large", and thus use a more memory-efficient way of representing the row internally? 
Networking	loadBalanceStrategy	No	random	alpha	5.0.6	 If using a load-balanced connection to connect to SQL nodes in a MySQL Cluster/NDB configuration (by using the URL prefix "jdbc:mysql:loadbalance://"), which load balancing algorithm should the driver use: (1) "random" - the driver will pick a random host for each request. This tends to work better than round-robin, as the randomness will somewhat account for spreading loads where requests vary in response time, while round-robin can sometimes lead to overloaded nodes if there are variations in response times across the workload. (2) "bestResponseTime" - the driver will route the request to the host that had the best response time for the previous transaction. (3) "serverAffinity" - the driver initially attempts to enforce server affinity while still respecting and benefiting from the fault tolerance aspects of the load-balancing implementation. The server affinity ordered list is provided using the property 'serverAffinityOrder'. If none of the servers listed in the affinity list is responsive, the driver then refers to the "random" strategy to proceed with choosing the next server. 
Networking	locatorFetchBufferSize	No	1048576	alpha	3.2.1	 If 'emulateLocators' is configured to 'true', what size buffer should be used when fetching BLOB data for getBinaryInputStream? 
Networking	readOnlyPropagatesToServer	No	true	alpha	5.1.35	 Should the driver issue appropriate statements to implicitly set the transaction access mode on server side when Connection.setReadOnly() is called? Setting this property to 'true' enables InnoDB read-only potential optimizations but also requires an extra roundtrip to set the right transaction state. Even if this property is set to 'false', the driver will do its best effort to prevent the execution of database-state-changing queries. Requires minimum of MySQL 5.6. 
Networking	rewriteBatchedStatements	No	false	alpha	3.1.13	 Should the driver use multiqueries (irregardless of the setting of "allowMultiQueries") as well as rewriting of prepared statements for INSERT into multi-value inserts when executeBatch() is called? Notice that this has the potential for SQL injection if using plain java.sql.Statements and your code doesn't sanitize input correctly. Notice that for prepared statements, server-side prepared statements can not currently take advantage of this rewrite option, and that if you don't specify stream lengths when using PreparedStatement.set*Stream(), the driver won't be able to determine the optimum number of parameters per batch and you might receive an error from the driver that the resultant packet is too large. Statement.getGeneratedKeys() for these rewritten statements only works when the entire batch includes INSERT statements. Please be aware using rewriteBatchedStatements=true with INSERT .. ON DUPLICATE KEY UPDATE that for rewritten statement server returns only one value as sum of all affected (or found) rows in batch and it isn't possible to map it correctly to initial statements; in this case driver returns 0 as a result of each batch statement if total count was 0, and the Statement.SUCCESS_NO_INFO as a result of each batch statement if total count was &gt; 0. 
Networking	serverAffinityOrder	No		alpha	5.1.43	 A comma separated list containing the host/port pairs that are to be used in load-balancing "serverAffinity" strategy. Only the sub-set of the hosts enumerated in the main hosts section in this URL will be used and they must be identical in case and type, i.e., can't use an IP address in one place and the corresponding host name in the other. 
Networking	useDirectRowUnpack	No	true	alpha	5.1.1	 Use newer result set row unpacking code that skips a copy from network buffers to a MySQL packet instance and instead reads directly into the result set row data buffers. 
Networking	useDynamicCharsetInfo	No	true	alpha	5.0.6	 Should the driver use a per-connection cache of character set information queried from the server when necessary, or use a built-in static mapping that is more efficient, but isn't aware of custom character sets or character sets implemented after the release of the JDBC driver? 
Networking	useFastDateParsing	No	true	alpha	5.0.5	 Use internal String-&gt;Date/Time/Timestamp conversion routines to avoid excessive object creation? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Networking	useFastIntParsing	No	true	alpha	3.1.4	 Use internal String-&gt;Integer conversion routines to avoid excessive object creation? 
Networking	useJvmCharsetConverters	No	false	alpha	5.0.1	 Always use the character encoding routines built into the JVM, rather than using lookup tables for single-byte character sets? 
Networking	useReadAheadInput	No	true	alpha	3.1.5	 Use newer, optimized non-blocking, buffered input stream when reading from the server? 
Networking	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
Networking	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
Networking	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
Networking	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
Networking	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
Networking	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
Networking	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
Networking	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
Networking	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
Networking	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
Networking	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
Networking	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
Networking	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
Networking	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
Networking	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
Networking	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
Networking	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
Networking	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
Networking	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
Networking	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
Networking	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
Networking	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
Networking	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
Networking	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
Networking	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
Networking	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
Networking	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Networking	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Networking	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Networking	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Networking	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Networking	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Networking	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Networking	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Networking	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Networking	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Networking	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Networking	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Networking	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Networking	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Networking	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Networking	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Networking	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Networking	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Networking	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Networking	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Networking	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Networking	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Networking	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Networking	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Networking	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Networking	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Networking	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Networking	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Networking	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Networking	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Networking	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Networking	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Networking	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Networking	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Networking	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Networking	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Networking	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Networking	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Networking	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Networking	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Networking	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Networking	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Networking	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Networking	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Networking	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Networking	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Networking	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Networking	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Networking	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Networking	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Networking	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Networking	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Networking	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Networking	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Networking	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Networking	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Networking	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Networking	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Networking	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Networking	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Networking	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Networking	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Networking	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Networking	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Networking	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Networking	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Networking	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Networking	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Networking	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Networking	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Networking	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Networking	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Networking	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Networking	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Networking	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Networking	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Networking	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Networking	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Networking	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Networking	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Networking	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Networking	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Networking	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Networking	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Networking	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Networking	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Networking	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
High Availability and Clustering	autoReconnect	No	false	0	1.1	 Should the driver try to re-establish stale and/or dead connections? If enabled the driver will throw an exception for a queries issued on a stale or dead connection, which belong to the current transaction, but will attempt reconnect before the next query issued on the connection in a new transaction. The use of this feature is not recommended, because it has side effects related to session state and data consistency when applications don't handle SQLExceptions properly, and is only designed to be used when you are unable to configure your application to handle SQLExceptions resulting from dead and stale connections properly. Alternatively, as a last option, investigate setting the MySQL server variable "wait_timeout" to a high value, rather than the default of 8 hours. 
High Availability and Clustering	autoReconnectForPools	No	false	1	3.1.3	 Use a reconnection strategy appropriate for connection pools (defaults to 'false') 
High Availability and Clustering	failOverReadOnly	No	true	2	3.0.12	 When failing over in autoReconnect mode, should the connection be set to 'read-only'? 
High Availability and Clustering	maxReconnects	No	3	4	1.1	 Maximum number of reconnects to attempt if autoReconnect is true, default is '3'. 
High Availability and Clustering	reconnectAtTxEnd	No	false	4	3.0.10	 If autoReconnect is set to true, should the driver attempt reconnections at the end of every transaction? 
High Availability and Clustering	retriesAllDown	No	120	4	5.1.6	 When using loadbalancing or failover, the number of times the driver should cycle through available hosts, attempting to connect. Between cycles, the driver will pause for 250ms if no servers are available. 
High Availability and Clustering	initialTimeout	No	2	5	1.1	 If autoReconnect is enabled, the initial time to wait between re-connect attempts (in seconds, defaults to '2'). 
High Availability and Clustering	roundRobinLoadBalance	No	false	5	3.1.2	 When autoReconnect is enabled, and failoverReadonly is false, should we pick hosts to connect to on a round-robin basis? 
High Availability and Clustering	queriesBeforeRetryMaster	No	50	7	3.0.2	 Number of queries to issue before falling back to the primary host when failed over (when using multi-host failover). Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the primary host. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Defaults to 50. 
High Availability and Clustering	secondsBeforeRetryMaster	No	30	8	3.0.2	 How long should the driver wait, when failed over, before attempting to reconnect to the primary host? Whichever condition is met first, 'queriesBeforeRetryMaster' or 'secondsBeforeRetryMaster' will cause an attempt to be made to reconnect to the master. Setting both properties to 0 disables the automatic fall back to the primary host at transaction boundaries. Time in seconds, defaults to 30 
High Availability and Clustering	allowMasterDownConnections	No	false	2147483647	5.1.27	 By default, a replication-aware connection will fail to connect when configured master hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection, by failing over to the slave servers, in read-only state. It won't prevent subsequent failures when switching back to the master hosts i.e. by setting the replication connection to read/write state. 
High Availability and Clustering	allowSlaveDownConnections	No	false	2147483647	5.1.38	 By default, a replication-aware connection will fail to connect when configured slave hosts are all unavailable at initial connection. Setting this property to 'true' allows to establish the initial connection. It won't prevent failures when switching to slaves i.e. by setting the replication connection to read-only state. The property 'readFromMasterWhenNoSlaves' should be used for this purpose. 
High Availability and Clustering	readFromMasterWhenNoSlaves	No	false	2147483647	5.1.38	 Replication-aware connections distribute load by using the master hosts when in read/write state and by using the slave hosts when in read-only state. If, when setting the connection to read-only state, none of the slave hosts are available, an SQLExeception is thrown back. Setting this property to 'true' allows to fail over to the master hosts, while setting the connection state to read-only, when no slave hosts are available at switch instant. 
High Availability and Clustering	replicationEnableJMX	No	false	2147483647	5.1.27	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
High Availability and Clustering	selfDestructOnPingMaxOperations	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will report close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's count of commands sent to the server exceeds this value. 
High Availability and Clustering	selfDestructOnPingSecondsLifetime	No	0	2147483647	5.1.6	 If set to a non-zero value, the driver will close the connection and report failure when Connection.ping() or Connection.isValid(int) is called if the connection's lifetime exceeds this value (in milliseconds). 
High Availability and Clustering	replicationConnectionGroup	No		alpha	5.1.27	 Logical group of replication connections within a classloader, used to manage different groups independently. If not specified, live management of replication connections is disabled. 
High Availability and Clustering	resourceId	No		alpha	5.0.1	 A globally unique name that identifies the resource that this datasource or connection is connected to, used for XAResource.isSameRM() when the driver can't determine this value based on hostnames used in the URL 
High Availability and Clustering	allowMultiQueries	No	false	1	3.1.1	 Allow the use of ';' to delimit multiple queries during one statement (true/false), defaults to 'false', and does not affect the addBatch() and executeBatch() methods, which instead rely on rewriteBatchStatements. 
High Availability and Clustering	useSSL	No	false	2	3.0.2	 Use SSL when communicating with the server (true/false), default is 'true' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is 'false' 
High Availability and Clustering	requireSSL	No	false	3	3.1.0	 Require server support of SSL connection if useSSL=true? (defaults to 'false'). 
High Availability and Clustering	verifyServerCertificate	No	true	4	5.1.6	 If "useSSL" is set to "true", should the driver verify the server's certificate? When using this feature, the keystore parameters should be specified by the "clientCertificateKeyStore*" properties, rather than system properties. Default is 'false' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+ and "useSSL" was not explicitly set to "true". Otherwise default is 'true' 
High Availability and Clustering	clientCertificateKeyStoreUrl	No		5	5.1.0	 URL to the client certificate KeyStore (if not specified, use defaults) 
High Availability and Clustering	clientCertificateKeyStoreType	No	JKS	6	5.1.0	 KeyStore type for client certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
High Availability and Clustering	clientCertificateKeyStorePassword	No		7	5.1.0	 Password for the client certificates KeyStore 
High Availability and Clustering	trustCertificateKeyStoreUrl	No		8	5.1.0	 URL to the trusted root certificate KeyStore (if not specified, use defaults) 
High Availability and Clustering	trustCertificateKeyStoreType	No	JKS	9	5.1.0	 KeyStore type for trusted root certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
High Availability and Clustering	trustCertificateKeyStorePassword	No		10	5.1.0	 Password for the trusted root certificates KeyStore 
High Availability and Clustering	enabledSSLCipherSuites	No		11	5.1.35	 If "useSSL" is set to "true", overrides the cipher suites enabled for use on the underlying SSL sockets. This may be required when using external JSSE providers or to specify cipher suites compatible with both MySQL server and used JVM. 
High Availability and Clustering	enabledTLSProtocols	No		12	5.1.44	 If "useSSL" is set to "true", overrides the TLS protocols enabled for use on the underlying SSL sockets. This may be used to restrict connections to specific TLS versions. 
High Availability and Clustering	allowLoadLocalInfile	No	true	2147483647	3.0.3	 Should the driver allow use of 'LOAD DATA LOCAL INFILE...' (defaults to 'true'). 
High Availability and Clustering	allowUrlInLocalInfile	No	false	2147483647	3.1.4	 Should the driver allow URLs in 'LOAD DATA LOCAL INFILE' statements? 
High Availability and Clustering	allowPublicKeyRetrieval	No	false	alpha	5.1.31	 Allows special handshake roundtrip to get server RSA public key directly from server. 
High Availability and Clustering	paranoid	No	false	alpha	3.0.1	 Take measures to prevent exposure sensitive information in error messages and clear data structures holding sensitive data when possible? (defaults to 'false') 
High Availability and Clustering	passwordCharacterEncoding	No		alpha	5.1.7	 What character encoding is used for passwords? Leaving this set to the default value (null), uses the value set in "characterEncoding" if there is one, otherwise uses UTF-8 as default encoding. If the password contains non-ASCII characters, the password encoding must match what server encoding was set to when the password was created. For passwords in other character encodings, the encoding will have to be specified with this property (or with "characterEncoding"), as it's not possible for the driver to auto-detect this. 
High Availability and Clustering	serverRSAPublicKeyFile	No		alpha	5.1.31	 File path to the server RSA public key file for sha256_password authentication. If not specified, the public key will be retrieved from the server. 
High Availability and Clustering	callableStmtCacheSize	No	100	5	3.1.2	 If 'cacheCallableStmts' is enabled, how many callable statements should be cached? 
High Availability and Clustering	metadataCacheSize	No	50	5	3.1.1	 The number of queries to cache ResultSetMetadata for if cacheResultSetMetaData is set to 'true' (default 50) 
High Availability and Clustering	useLocalSessionState	No	false	5	3.1.7	 Should the driver refer to the internal values of autocommit and transaction isolation that are set by Connection.setAutoCommit() and Connection.setTransactionIsolation() and transaction state as maintained by the protocol, rather than querying the database or blindly sending commands to the database for commit() or rollback() method calls? 
High Availability and Clustering	useLocalTransactionState	No	false	6	5.1.7	 Should the driver use the in-transaction state provided by the MySQL protocol to determine if a commit() or rollback() should actually be sent to the database? 
High Availability and Clustering	prepStmtCacheSize	No	25	10	3.0.10	 If prepared statement caching is enabled, how many prepared statements should be cached? 
High Availability and Clustering	prepStmtCacheSqlLimit	No	256	11	3.0.10	 If prepared statement caching is enabled, what's the largest SQL the driver will cache the parsing for? 
High Availability and Clustering	parseInfoCacheFactory	No	com.mysql.jdbc.PerConnectionLRUFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory, which will be used to create caches for the parsed representation of client-side prepared statements. 
High Availability and Clustering	serverConfigCacheFactory	No	com.mysql.jdbc.PerVmServerConfigCacheFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory&lt;String, Map&lt;String, String&gt;&gt;, which will be used to create caches for MySQL server configuration values 
High Availability and Clustering	alwaysSendSetIsolation	No	true	2147483647	3.1.7	 Should the driver always communicate with the database when Connection.setTransactionIsolation() is called? If set to false, the driver will only communicate with the database when the requested transaction isolation is different than the whichever is newer, the last value that was set via Connection.setTransactionIsolation(), or the value that was read from the server when the connection was established. Note that useLocalSessionState=true will force the same behavior as alwaysSendSetIsolation=false, regardless of how alwaysSendSetIsolation is set. 
High Availability and Clustering	maintainTimeStats	No	true	2147483647	3.1.9	 Should the driver maintain various internal timers to enable idle time calculations as well as more verbose error messages when the connection to the server fails? Setting this property to false removes at least two calls to System.getCurrentTimeMillis() per query. 
High Availability and Clustering	useCursorFetch	No	false	2147483647	5.0.0	 If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows? 
High Availability and Clustering	blobSendChunkSize	No	1048576	alpha	3.1.9	 Chunk size to use when sending BLOB/CLOBs via ServerPreparedStatements. Note that this value cannot exceed the value of "maxAllowedPacket" and, if that is the case, then this value will be corrected automatically. 
High Availability and Clustering	cacheCallableStmts	No	false	alpha	3.1.2	 Should the driver cache the parsing stage of CallableStatements 
High Availability and Clustering	cachePrepStmts	No	false	alpha	3.0.10	 Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves? 
High Availability and Clustering	cacheResultSetMetadata	No	false	alpha	3.1.1	 Should the driver cache ResultSetMetaData for Statements and PreparedStatements? (Req. JDK-1.4+, true/false, default 'false') 
High Availability and Clustering	cacheServerConfiguration	No	false	alpha	3.1.5	 Should the driver cache the results of 'SHOW VARIABLES' and 'SHOW COLLATION' on a per-URL basis? 
High Availability and Clustering	defaultFetchSize	No	0	alpha	3.1.9	 The driver will call setFetchSize(n) with this value on all newly-created Statements 
High Availability and Clustering	dontCheckOnDuplicateKeyUpdateInSQL	No	false	alpha	5.1.32	 Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement's generated keys information will return a list where normally it wouldn't. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with 'rewriteBatchedStatements=true'. 
High Availability and Clustering	dontTrackOpenResources	No	false	alpha	3.1.7	 The JDBC specification requires the driver to automatically track and close resources, however if your application doesn't do a good job of explicitly calling close() on statements or result sets, this can cause memory leakage. Setting this property to true relaxes this constraint, and can be more memory efficient for some applications. Also the automatic closing of the Statement and current ResultSet in Statement.closeOnCompletion() and Statement.getMoreResults ([Statement.CLOSE_CURRENT_RESULT | Statement.CLOSE_ALL_RESULTS]), respectively, ceases to happen. This property automatically sets holdResultsOpenOverStatementClose=true. 
High Availability and Clustering	dynamicCalendars	No	false	alpha	3.1.5	 Should the driver retrieve the default calendar when required, or cache it per connection/session? 
High Availability and Clustering	elideSetAutoCommits	No	false	alpha	3.1.3	 If using MySQL-4.1 or newer, should the driver only issue 'set autocommit=n' queries when the server's state doesn't match the requested state by Connection.setAutoCommit(boolean)? 
High Availability and Clustering	enableEscapeProcessing	No	true	alpha	5.1.37	 Sets the default escape processing behavior for Statement objects. The method Statement.setEscapeProcessing() can be used to specify the escape processing behavior for an individual Statement object. Default escape processing behavior in prepared statements must be defined with the property 'processEscapeCodesForPrepStmts'. 
High Availability and Clustering	enableQueryTimeouts	No	true	alpha	5.0.6	 When enabled, query timeouts set via Statement.setQueryTimeout() use a shared java.util.Timer instance for scheduling. Even if the timeout doesn't expire before the query is processed, there will be memory used by the TimerTask for the given timeout which won't be reclaimed until the time the timeout would have expired if it hadn't been cancelled by the driver. High-load environments might want to consider disabling this functionality. 
High Availability and Clustering	holdResultsOpenOverStatementClose	No	false	alpha	3.1.7	 Should the driver close result sets on Statement.close() as required by the JDBC specification? 
High Availability and Clustering	largeRowSizeThreshold	No	2048	alpha	5.1.1	 What size result set row should the JDBC driver consider "large", and thus use a more memory-efficient way of representing the row internally? 
High Availability and Clustering	loadBalanceStrategy	No	random	alpha	5.0.6	 If using a load-balanced connection to connect to SQL nodes in a MySQL Cluster/NDB configuration (by using the URL prefix "jdbc:mysql:loadbalance://"), which load balancing algorithm should the driver use: (1) "random" - the driver will pick a random host for each request. This tends to work better than round-robin, as the randomness will somewhat account for spreading loads where requests vary in response time, while round-robin can sometimes lead to overloaded nodes if there are variations in response times across the workload. (2) "bestResponseTime" - the driver will route the request to the host that had the best response time for the previous transaction. (3) "serverAffinity" - the driver initially attempts to enforce server affinity while still respecting and benefiting from the fault tolerance aspects of the load-balancing implementation. The server affinity ordered list is provided using the property 'serverAffinityOrder'. If none of the servers listed in the affinity list is responsive, the driver then refers to the "random" strategy to proceed with choosing the next server. 
High Availability and Clustering	locatorFetchBufferSize	No	1048576	alpha	3.2.1	 If 'emulateLocators' is configured to 'true', what size buffer should be used when fetching BLOB data for getBinaryInputStream? 
High Availability and Clustering	readOnlyPropagatesToServer	No	true	alpha	5.1.35	 Should the driver issue appropriate statements to implicitly set the transaction access mode on server side when Connection.setReadOnly() is called? Setting this property to 'true' enables InnoDB read-only potential optimizations but also requires an extra roundtrip to set the right transaction state. Even if this property is set to 'false', the driver will do its best effort to prevent the execution of database-state-changing queries. Requires minimum of MySQL 5.6. 
High Availability and Clustering	rewriteBatchedStatements	No	false	alpha	3.1.13	 Should the driver use multiqueries (irregardless of the setting of "allowMultiQueries") as well as rewriting of prepared statements for INSERT into multi-value inserts when executeBatch() is called? Notice that this has the potential for SQL injection if using plain java.sql.Statements and your code doesn't sanitize input correctly. Notice that for prepared statements, server-side prepared statements can not currently take advantage of this rewrite option, and that if you don't specify stream lengths when using PreparedStatement.set*Stream(), the driver won't be able to determine the optimum number of parameters per batch and you might receive an error from the driver that the resultant packet is too large. Statement.getGeneratedKeys() for these rewritten statements only works when the entire batch includes INSERT statements. Please be aware using rewriteBatchedStatements=true with INSERT .. ON DUPLICATE KEY UPDATE that for rewritten statement server returns only one value as sum of all affected (or found) rows in batch and it isn't possible to map it correctly to initial statements; in this case driver returns 0 as a result of each batch statement if total count was 0, and the Statement.SUCCESS_NO_INFO as a result of each batch statement if total count was &gt; 0. 
High Availability and Clustering	serverAffinityOrder	No		alpha	5.1.43	 A comma separated list containing the host/port pairs that are to be used in load-balancing "serverAffinity" strategy. Only the sub-set of the hosts enumerated in the main hosts section in this URL will be used and they must be identical in case and type, i.e., can't use an IP address in one place and the corresponding host name in the other. 
High Availability and Clustering	useDirectRowUnpack	No	true	alpha	5.1.1	 Use newer result set row unpacking code that skips a copy from network buffers to a MySQL packet instance and instead reads directly into the result set row data buffers. 
High Availability and Clustering	useDynamicCharsetInfo	No	true	alpha	5.0.6	 Should the driver use a per-connection cache of character set information queried from the server when necessary, or use a built-in static mapping that is more efficient, but isn't aware of custom character sets or character sets implemented after the release of the JDBC driver? 
High Availability and Clustering	useFastDateParsing	No	true	alpha	5.0.5	 Use internal String-&gt;Date/Time/Timestamp conversion routines to avoid excessive object creation? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
High Availability and Clustering	useFastIntParsing	No	true	alpha	3.1.4	 Use internal String-&gt;Integer conversion routines to avoid excessive object creation? 
High Availability and Clustering	useJvmCharsetConverters	No	false	alpha	5.0.1	 Always use the character encoding routines built into the JVM, rather than using lookup tables for single-byte character sets? 
High Availability and Clustering	useReadAheadInput	No	true	alpha	3.1.5	 Use newer, optimized non-blocking, buffered input stream when reading from the server? 
High Availability and Clustering	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
High Availability and Clustering	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
High Availability and Clustering	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
High Availability and Clustering	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
High Availability and Clustering	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
High Availability and Clustering	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
High Availability and Clustering	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
High Availability and Clustering	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
High Availability and Clustering	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
High Availability and Clustering	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
High Availability and Clustering	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
High Availability and Clustering	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
High Availability and Clustering	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
High Availability and Clustering	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
High Availability and Clustering	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
High Availability and Clustering	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
High Availability and Clustering	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
High Availability and Clustering	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
High Availability and Clustering	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
High Availability and Clustering	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
High Availability and Clustering	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
High Availability and Clustering	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
High Availability and Clustering	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
High Availability and Clustering	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
High Availability and Clustering	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
High Availability and Clustering	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
High Availability and Clustering	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
High Availability and Clustering	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
High Availability and Clustering	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
High Availability and Clustering	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
High Availability and Clustering	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
High Availability and Clustering	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
High Availability and Clustering	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
High Availability and Clustering	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
High Availability and Clustering	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
High Availability and Clustering	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
High Availability and Clustering	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
High Availability and Clustering	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
High Availability and Clustering	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
High Availability and Clustering	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
High Availability and Clustering	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
High Availability and Clustering	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
High Availability and Clustering	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
High Availability and Clustering	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
High Availability and Clustering	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
High Availability and Clustering	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
High Availability and Clustering	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
High Availability and Clustering	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
High Availability and Clustering	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
High Availability and Clustering	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
High Availability and Clustering	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
High Availability and Clustering	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
High Availability and Clustering	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
High Availability and Clustering	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
High Availability and Clustering	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
High Availability and Clustering	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
High Availability and Clustering	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
High Availability and Clustering	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
High Availability and Clustering	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
High Availability and Clustering	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
High Availability and Clustering	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
High Availability and Clustering	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
High Availability and Clustering	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
High Availability and Clustering	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
High Availability and Clustering	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
High Availability and Clustering	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
High Availability and Clustering	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
High Availability and Clustering	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
High Availability and Clustering	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
High Availability and Clustering	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
High Availability and Clustering	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
High Availability and Clustering	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
High Availability and Clustering	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
High Availability and Clustering	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
High Availability and Clustering	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
High Availability and Clustering	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
High Availability and Clustering	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
High Availability and Clustering	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
High Availability and Clustering	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
High Availability and Clustering	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
High Availability and Clustering	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
High Availability and Clustering	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
High Availability and Clustering	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
High Availability and Clustering	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
High Availability and Clustering	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
High Availability and Clustering	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
High Availability and Clustering	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
High Availability and Clustering	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
High Availability and Clustering	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
High Availability and Clustering	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
High Availability and Clustering	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
High Availability and Clustering	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
High Availability and Clustering	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
High Availability and Clustering	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
High Availability and Clustering	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
High Availability and Clustering	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
High Availability and Clustering	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
High Availability and Clustering	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
High Availability and Clustering	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
High Availability and Clustering	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
High Availability and Clustering	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
High Availability and Clustering	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
High Availability and Clustering	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
High Availability and Clustering	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
High Availability and Clustering	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
High Availability and Clustering	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
High Availability and Clustering	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
High Availability and Clustering	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
High Availability and Clustering	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
High Availability and Clustering	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
High Availability and Clustering	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
High Availability and Clustering	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
High Availability and Clustering	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
Security	allowMultiQueries	No	false	1	3.1.1	 Allow the use of ';' to delimit multiple queries during one statement (true/false), defaults to 'false', and does not affect the addBatch() and executeBatch() methods, which instead rely on rewriteBatchStatements. 
Security	useSSL	No	false	2	3.0.2	 Use SSL when communicating with the server (true/false), default is 'true' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is 'false' 
Security	requireSSL	No	false	3	3.1.0	 Require server support of SSL connection if useSSL=true? (defaults to 'false'). 
Security	verifyServerCertificate	No	true	4	5.1.6	 If "useSSL" is set to "true", should the driver verify the server's certificate? When using this feature, the keystore parameters should be specified by the "clientCertificateKeyStore*" properties, rather than system properties. Default is 'false' when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+ and "useSSL" was not explicitly set to "true". Otherwise default is 'true' 
Security	clientCertificateKeyStoreUrl	No		5	5.1.0	 URL to the client certificate KeyStore (if not specified, use defaults) 
Security	clientCertificateKeyStoreType	No	JKS	6	5.1.0	 KeyStore type for client certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Security	clientCertificateKeyStorePassword	No		7	5.1.0	 Password for the client certificates KeyStore 
Security	trustCertificateKeyStoreUrl	No		8	5.1.0	 URL to the trusted root certificate KeyStore (if not specified, use defaults) 
Security	trustCertificateKeyStoreType	No	JKS	9	5.1.0	 KeyStore type for trusted root certificates (NULL or empty means use the default, which is "JKS". Standard keystore types supported by the JVM are "JKS" and "PKCS12", your environment may have more available depending on what security products are installed and available to the JVM. 
Security	trustCertificateKeyStorePassword	No		10	5.1.0	 Password for the trusted root certificates KeyStore 
Security	enabledSSLCipherSuites	No		11	5.1.35	 If "useSSL" is set to "true", overrides the cipher suites enabled for use on the underlying SSL sockets. This may be required when using external JSSE providers or to specify cipher suites compatible with both MySQL server and used JVM. 
Security	enabledTLSProtocols	No		12	5.1.44	 If "useSSL" is set to "true", overrides the TLS protocols enabled for use on the underlying SSL sockets. This may be used to restrict connections to specific TLS versions. 
Security	allowLoadLocalInfile	No	true	2147483647	3.0.3	 Should the driver allow use of 'LOAD DATA LOCAL INFILE...' (defaults to 'true'). 
Security	allowUrlInLocalInfile	No	false	2147483647	3.1.4	 Should the driver allow URLs in 'LOAD DATA LOCAL INFILE' statements? 
Security	allowPublicKeyRetrieval	No	false	alpha	5.1.31	 Allows special handshake roundtrip to get server RSA public key directly from server. 
Security	paranoid	No	false	alpha	3.0.1	 Take measures to prevent exposure sensitive information in error messages and clear data structures holding sensitive data when possible? (defaults to 'false') 
Security	passwordCharacterEncoding	No		alpha	5.1.7	 What character encoding is used for passwords? Leaving this set to the default value (null), uses the value set in "characterEncoding" if there is one, otherwise uses UTF-8 as default encoding. If the password contains non-ASCII characters, the password encoding must match what server encoding was set to when the password was created. For passwords in other character encodings, the encoding will have to be specified with this property (or with "characterEncoding"), as it's not possible for the driver to auto-detect this. 
Security	serverRSAPublicKeyFile	No		alpha	5.1.31	 File path to the server RSA public key file for sha256_password authentication. If not specified, the public key will be retrieved from the server. 
Security	callableStmtCacheSize	No	100	5	3.1.2	 If 'cacheCallableStmts' is enabled, how many callable statements should be cached? 
Security	metadataCacheSize	No	50	5	3.1.1	 The number of queries to cache ResultSetMetadata for if cacheResultSetMetaData is set to 'true' (default 50) 
Security	useLocalSessionState	No	false	5	3.1.7	 Should the driver refer to the internal values of autocommit and transaction isolation that are set by Connection.setAutoCommit() and Connection.setTransactionIsolation() and transaction state as maintained by the protocol, rather than querying the database or blindly sending commands to the database for commit() or rollback() method calls? 
Security	useLocalTransactionState	No	false	6	5.1.7	 Should the driver use the in-transaction state provided by the MySQL protocol to determine if a commit() or rollback() should actually be sent to the database? 
Security	prepStmtCacheSize	No	25	10	3.0.10	 If prepared statement caching is enabled, how many prepared statements should be cached? 
Security	prepStmtCacheSqlLimit	No	256	11	3.0.10	 If prepared statement caching is enabled, what's the largest SQL the driver will cache the parsing for? 
Security	parseInfoCacheFactory	No	com.mysql.jdbc.PerConnectionLRUFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory, which will be used to create caches for the parsed representation of client-side prepared statements. 
Security	serverConfigCacheFactory	No	com.mysql.jdbc.PerVmServerConfigCacheFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory&lt;String, Map&lt;String, String&gt;&gt;, which will be used to create caches for MySQL server configuration values 
Security	alwaysSendSetIsolation	No	true	2147483647	3.1.7	 Should the driver always communicate with the database when Connection.setTransactionIsolation() is called? If set to false, the driver will only communicate with the database when the requested transaction isolation is different than the whichever is newer, the last value that was set via Connection.setTransactionIsolation(), or the value that was read from the server when the connection was established. Note that useLocalSessionState=true will force the same behavior as alwaysSendSetIsolation=false, regardless of how alwaysSendSetIsolation is set. 
Security	maintainTimeStats	No	true	2147483647	3.1.9	 Should the driver maintain various internal timers to enable idle time calculations as well as more verbose error messages when the connection to the server fails? Setting this property to false removes at least two calls to System.getCurrentTimeMillis() per query. 
Security	useCursorFetch	No	false	2147483647	5.0.0	 If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows? 
Security	blobSendChunkSize	No	1048576	alpha	3.1.9	 Chunk size to use when sending BLOB/CLOBs via ServerPreparedStatements. Note that this value cannot exceed the value of "maxAllowedPacket" and, if that is the case, then this value will be corrected automatically. 
Security	cacheCallableStmts	No	false	alpha	3.1.2	 Should the driver cache the parsing stage of CallableStatements 
Security	cachePrepStmts	No	false	alpha	3.0.10	 Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves? 
Security	cacheResultSetMetadata	No	false	alpha	3.1.1	 Should the driver cache ResultSetMetaData for Statements and PreparedStatements? (Req. JDK-1.4+, true/false, default 'false') 
Security	cacheServerConfiguration	No	false	alpha	3.1.5	 Should the driver cache the results of 'SHOW VARIABLES' and 'SHOW COLLATION' on a per-URL basis? 
Security	defaultFetchSize	No	0	alpha	3.1.9	 The driver will call setFetchSize(n) with this value on all newly-created Statements 
Security	dontCheckOnDuplicateKeyUpdateInSQL	No	false	alpha	5.1.32	 Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement's generated keys information will return a list where normally it wouldn't. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with 'rewriteBatchedStatements=true'. 
Security	dontTrackOpenResources	No	false	alpha	3.1.7	 The JDBC specification requires the driver to automatically track and close resources, however if your application doesn't do a good job of explicitly calling close() on statements or result sets, this can cause memory leakage. Setting this property to true relaxes this constraint, and can be more memory efficient for some applications. Also the automatic closing of the Statement and current ResultSet in Statement.closeOnCompletion() and Statement.getMoreResults ([Statement.CLOSE_CURRENT_RESULT | Statement.CLOSE_ALL_RESULTS]), respectively, ceases to happen. This property automatically sets holdResultsOpenOverStatementClose=true. 
Security	dynamicCalendars	No	false	alpha	3.1.5	 Should the driver retrieve the default calendar when required, or cache it per connection/session? 
Security	elideSetAutoCommits	No	false	alpha	3.1.3	 If using MySQL-4.1 or newer, should the driver only issue 'set autocommit=n' queries when the server's state doesn't match the requested state by Connection.setAutoCommit(boolean)? 
Security	enableEscapeProcessing	No	true	alpha	5.1.37	 Sets the default escape processing behavior for Statement objects. The method Statement.setEscapeProcessing() can be used to specify the escape processing behavior for an individual Statement object. Default escape processing behavior in prepared statements must be defined with the property 'processEscapeCodesForPrepStmts'. 
Security	enableQueryTimeouts	No	true	alpha	5.0.6	 When enabled, query timeouts set via Statement.setQueryTimeout() use a shared java.util.Timer instance for scheduling. Even if the timeout doesn't expire before the query is processed, there will be memory used by the TimerTask for the given timeout which won't be reclaimed until the time the timeout would have expired if it hadn't been cancelled by the driver. High-load environments might want to consider disabling this functionality. 
Security	holdResultsOpenOverStatementClose	No	false	alpha	3.1.7	 Should the driver close result sets on Statement.close() as required by the JDBC specification? 
Security	largeRowSizeThreshold	No	2048	alpha	5.1.1	 What size result set row should the JDBC driver consider "large", and thus use a more memory-efficient way of representing the row internally? 
Security	loadBalanceStrategy	No	random	alpha	5.0.6	 If using a load-balanced connection to connect to SQL nodes in a MySQL Cluster/NDB configuration (by using the URL prefix "jdbc:mysql:loadbalance://"), which load balancing algorithm should the driver use: (1) "random" - the driver will pick a random host for each request. This tends to work better than round-robin, as the randomness will somewhat account for spreading loads where requests vary in response time, while round-robin can sometimes lead to overloaded nodes if there are variations in response times across the workload. (2) "bestResponseTime" - the driver will route the request to the host that had the best response time for the previous transaction. (3) "serverAffinity" - the driver initially attempts to enforce server affinity while still respecting and benefiting from the fault tolerance aspects of the load-balancing implementation. The server affinity ordered list is provided using the property 'serverAffinityOrder'. If none of the servers listed in the affinity list is responsive, the driver then refers to the "random" strategy to proceed with choosing the next server. 
Security	locatorFetchBufferSize	No	1048576	alpha	3.2.1	 If 'emulateLocators' is configured to 'true', what size buffer should be used when fetching BLOB data for getBinaryInputStream? 
Security	readOnlyPropagatesToServer	No	true	alpha	5.1.35	 Should the driver issue appropriate statements to implicitly set the transaction access mode on server side when Connection.setReadOnly() is called? Setting this property to 'true' enables InnoDB read-only potential optimizations but also requires an extra roundtrip to set the right transaction state. Even if this property is set to 'false', the driver will do its best effort to prevent the execution of database-state-changing queries. Requires minimum of MySQL 5.6. 
Security	rewriteBatchedStatements	No	false	alpha	3.1.13	 Should the driver use multiqueries (irregardless of the setting of "allowMultiQueries") as well as rewriting of prepared statements for INSERT into multi-value inserts when executeBatch() is called? Notice that this has the potential for SQL injection if using plain java.sql.Statements and your code doesn't sanitize input correctly. Notice that for prepared statements, server-side prepared statements can not currently take advantage of this rewrite option, and that if you don't specify stream lengths when using PreparedStatement.set*Stream(), the driver won't be able to determine the optimum number of parameters per batch and you might receive an error from the driver that the resultant packet is too large. Statement.getGeneratedKeys() for these rewritten statements only works when the entire batch includes INSERT statements. Please be aware using rewriteBatchedStatements=true with INSERT .. ON DUPLICATE KEY UPDATE that for rewritten statement server returns only one value as sum of all affected (or found) rows in batch and it isn't possible to map it correctly to initial statements; in this case driver returns 0 as a result of each batch statement if total count was 0, and the Statement.SUCCESS_NO_INFO as a result of each batch statement if total count was &gt; 0. 
Security	serverAffinityOrder	No		alpha	5.1.43	 A comma separated list containing the host/port pairs that are to be used in load-balancing "serverAffinity" strategy. Only the sub-set of the hosts enumerated in the main hosts section in this URL will be used and they must be identical in case and type, i.e., can't use an IP address in one place and the corresponding host name in the other. 
Security	useDirectRowUnpack	No	true	alpha	5.1.1	 Use newer result set row unpacking code that skips a copy from network buffers to a MySQL packet instance and instead reads directly into the result set row data buffers. 
Security	useDynamicCharsetInfo	No	true	alpha	5.0.6	 Should the driver use a per-connection cache of character set information queried from the server when necessary, or use a built-in static mapping that is more efficient, but isn't aware of custom character sets or character sets implemented after the release of the JDBC driver? 
Security	useFastDateParsing	No	true	alpha	5.0.5	 Use internal String-&gt;Date/Time/Timestamp conversion routines to avoid excessive object creation? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Security	useFastIntParsing	No	true	alpha	3.1.4	 Use internal String-&gt;Integer conversion routines to avoid excessive object creation? 
Security	useJvmCharsetConverters	No	false	alpha	5.0.1	 Always use the character encoding routines built into the JVM, rather than using lookup tables for single-byte character sets? 
Security	useReadAheadInput	No	true	alpha	3.1.5	 Use newer, optimized non-blocking, buffered input stream when reading from the server? 
Security	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
Security	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
Security	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
Security	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
Security	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
Security	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
Security	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
Security	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
Security	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
Security	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
Security	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
Security	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
Security	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
Security	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
Security	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
Security	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
Security	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
Security	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
Security	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
Security	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
Security	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
Security	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
Security	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
Security	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
Security	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
Security	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
Security	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Security	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Security	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Security	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Security	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Security	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Security	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Security	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Security	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Security	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Security	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Security	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Security	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Security	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Security	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Security	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Security	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Security	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Security	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Security	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Security	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Security	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Security	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Security	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Security	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Security	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Security	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Security	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Security	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Security	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Security	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Security	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Security	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Security	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Security	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Security	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Security	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Security	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Security	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Security	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Security	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Security	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Security	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Security	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Security	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Security	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Security	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Security	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Security	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Security	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Security	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Security	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Security	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Security	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Security	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Security	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Security	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Security	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Security	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Security	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Security	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Security	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Security	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Security	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Security	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Security	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Security	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Security	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Security	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Security	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Security	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Security	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Security	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Security	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Security	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Security	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Security	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Security	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Security	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Security	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Security	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Security	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Security	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Security	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Security	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Security	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Security	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
Performance Extensions	callableStmtCacheSize	No	100	5	3.1.2	 If 'cacheCallableStmts' is enabled, how many callable statements should be cached? 
Performance Extensions	metadataCacheSize	No	50	5	3.1.1	 The number of queries to cache ResultSetMetadata for if cacheResultSetMetaData is set to 'true' (default 50) 
Performance Extensions	useLocalSessionState	No	false	5	3.1.7	 Should the driver refer to the internal values of autocommit and transaction isolation that are set by Connection.setAutoCommit() and Connection.setTransactionIsolation() and transaction state as maintained by the protocol, rather than querying the database or blindly sending commands to the database for commit() or rollback() method calls? 
Performance Extensions	useLocalTransactionState	No	false	6	5.1.7	 Should the driver use the in-transaction state provided by the MySQL protocol to determine if a commit() or rollback() should actually be sent to the database? 
Performance Extensions	prepStmtCacheSize	No	25	10	3.0.10	 If prepared statement caching is enabled, how many prepared statements should be cached? 
Performance Extensions	prepStmtCacheSqlLimit	No	256	11	3.0.10	 If prepared statement caching is enabled, what's the largest SQL the driver will cache the parsing for? 
Performance Extensions	parseInfoCacheFactory	No	com.mysql.jdbc.PerConnectionLRUFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory, which will be used to create caches for the parsed representation of client-side prepared statements. 
Performance Extensions	serverConfigCacheFactory	No	com.mysql.jdbc.PerVmServerConfigCacheFactory	12	5.1.1	 Name of a class implementing com.mysql.jdbc.CacheAdapterFactory&lt;String, Map&lt;String, String&gt;&gt;, which will be used to create caches for MySQL server configuration values 
Performance Extensions	alwaysSendSetIsolation	No	true	2147483647	3.1.7	 Should the driver always communicate with the database when Connection.setTransactionIsolation() is called? If set to false, the driver will only communicate with the database when the requested transaction isolation is different than the whichever is newer, the last value that was set via Connection.setTransactionIsolation(), or the value that was read from the server when the connection was established. Note that useLocalSessionState=true will force the same behavior as alwaysSendSetIsolation=false, regardless of how alwaysSendSetIsolation is set. 
Performance Extensions	maintainTimeStats	No	true	2147483647	3.1.9	 Should the driver maintain various internal timers to enable idle time calculations as well as more verbose error messages when the connection to the server fails? Setting this property to false removes at least two calls to System.getCurrentTimeMillis() per query. 
Performance Extensions	useCursorFetch	No	false	2147483647	5.0.0	 If connected to MySQL &gt; 5.0.2, and setFetchSize() &gt; 0 on a statement, should that statement use cursor-based fetching to retrieve rows? 
Performance Extensions	blobSendChunkSize	No	1048576	alpha	3.1.9	 Chunk size to use when sending BLOB/CLOBs via ServerPreparedStatements. Note that this value cannot exceed the value of "maxAllowedPacket" and, if that is the case, then this value will be corrected automatically. 
Performance Extensions	cacheCallableStmts	No	false	alpha	3.1.2	 Should the driver cache the parsing stage of CallableStatements 
Performance Extensions	cachePrepStmts	No	false	alpha	3.0.10	 Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the "check" for suitability of server-side prepared and server-side prepared statements themselves? 
Performance Extensions	cacheResultSetMetadata	No	false	alpha	3.1.1	 Should the driver cache ResultSetMetaData for Statements and PreparedStatements? (Req. JDK-1.4+, true/false, default 'false') 
Performance Extensions	cacheServerConfiguration	No	false	alpha	3.1.5	 Should the driver cache the results of 'SHOW VARIABLES' and 'SHOW COLLATION' on a per-URL basis? 
Performance Extensions	defaultFetchSize	No	0	alpha	3.1.9	 The driver will call setFetchSize(n) with this value on all newly-created Statements 
Performance Extensions	dontCheckOnDuplicateKeyUpdateInSQL	No	false	alpha	5.1.32	 Stops checking if every INSERT statement contains the "ON DUPLICATE KEY UPDATE" clause. As a side effect, obtaining the statement's generated keys information will return a list where normally it wouldn't. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with 'rewriteBatchedStatements=true'. 
Performance Extensions	dontTrackOpenResources	No	false	alpha	3.1.7	 The JDBC specification requires the driver to automatically track and close resources, however if your application doesn't do a good job of explicitly calling close() on statements or result sets, this can cause memory leakage. Setting this property to true relaxes this constraint, and can be more memory efficient for some applications. Also the automatic closing of the Statement and current ResultSet in Statement.closeOnCompletion() and Statement.getMoreResults ([Statement.CLOSE_CURRENT_RESULT | Statement.CLOSE_ALL_RESULTS]), respectively, ceases to happen. This property automatically sets holdResultsOpenOverStatementClose=true. 
Performance Extensions	dynamicCalendars	No	false	alpha	3.1.5	 Should the driver retrieve the default calendar when required, or cache it per connection/session? 
Performance Extensions	elideSetAutoCommits	No	false	alpha	3.1.3	 If using MySQL-4.1 or newer, should the driver only issue 'set autocommit=n' queries when the server's state doesn't match the requested state by Connection.setAutoCommit(boolean)? 
Performance Extensions	enableEscapeProcessing	No	true	alpha	5.1.37	 Sets the default escape processing behavior for Statement objects. The method Statement.setEscapeProcessing() can be used to specify the escape processing behavior for an individual Statement object. Default escape processing behavior in prepared statements must be defined with the property 'processEscapeCodesForPrepStmts'. 
Performance Extensions	enableQueryTimeouts	No	true	alpha	5.0.6	 When enabled, query timeouts set via Statement.setQueryTimeout() use a shared java.util.Timer instance for scheduling. Even if the timeout doesn't expire before the query is processed, there will be memory used by the TimerTask for the given timeout which won't be reclaimed until the time the timeout would have expired if it hadn't been cancelled by the driver. High-load environments might want to consider disabling this functionality. 
Performance Extensions	holdResultsOpenOverStatementClose	No	false	alpha	3.1.7	 Should the driver close result sets on Statement.close() as required by the JDBC specification? 
Performance Extensions	largeRowSizeThreshold	No	2048	alpha	5.1.1	 What size result set row should the JDBC driver consider "large", and thus use a more memory-efficient way of representing the row internally? 
Performance Extensions	loadBalanceStrategy	No	random	alpha	5.0.6	 If using a load-balanced connection to connect to SQL nodes in a MySQL Cluster/NDB configuration (by using the URL prefix "jdbc:mysql:loadbalance://"), which load balancing algorithm should the driver use: (1) "random" - the driver will pick a random host for each request. This tends to work better than round-robin, as the randomness will somewhat account for spreading loads where requests vary in response time, while round-robin can sometimes lead to overloaded nodes if there are variations in response times across the workload. (2) "bestResponseTime" - the driver will route the request to the host that had the best response time for the previous transaction. (3) "serverAffinity" - the driver initially attempts to enforce server affinity while still respecting and benefiting from the fault tolerance aspects of the load-balancing implementation. The server affinity ordered list is provided using the property 'serverAffinityOrder'. If none of the servers listed in the affinity list is responsive, the driver then refers to the "random" strategy to proceed with choosing the next server. 
Performance Extensions	locatorFetchBufferSize	No	1048576	alpha	3.2.1	 If 'emulateLocators' is configured to 'true', what size buffer should be used when fetching BLOB data for getBinaryInputStream? 
Performance Extensions	readOnlyPropagatesToServer	No	true	alpha	5.1.35	 Should the driver issue appropriate statements to implicitly set the transaction access mode on server side when Connection.setReadOnly() is called? Setting this property to 'true' enables InnoDB read-only potential optimizations but also requires an extra roundtrip to set the right transaction state. Even if this property is set to 'false', the driver will do its best effort to prevent the execution of database-state-changing queries. Requires minimum of MySQL 5.6. 
Performance Extensions	rewriteBatchedStatements	No	false	alpha	3.1.13	 Should the driver use multiqueries (irregardless of the setting of "allowMultiQueries") as well as rewriting of prepared statements for INSERT into multi-value inserts when executeBatch() is called? Notice that this has the potential for SQL injection if using plain java.sql.Statements and your code doesn't sanitize input correctly. Notice that for prepared statements, server-side prepared statements can not currently take advantage of this rewrite option, and that if you don't specify stream lengths when using PreparedStatement.set*Stream(), the driver won't be able to determine the optimum number of parameters per batch and you might receive an error from the driver that the resultant packet is too large. Statement.getGeneratedKeys() for these rewritten statements only works when the entire batch includes INSERT statements. Please be aware using rewriteBatchedStatements=true with INSERT .. ON DUPLICATE KEY UPDATE that for rewritten statement server returns only one value as sum of all affected (or found) rows in batch and it isn't possible to map it correctly to initial statements; in this case driver returns 0 as a result of each batch statement if total count was 0, and the Statement.SUCCESS_NO_INFO as a result of each batch statement if total count was &gt; 0. 
Performance Extensions	serverAffinityOrder	No		alpha	5.1.43	 A comma separated list containing the host/port pairs that are to be used in load-balancing "serverAffinity" strategy. Only the sub-set of the hosts enumerated in the main hosts section in this URL will be used and they must be identical in case and type, i.e., can't use an IP address in one place and the corresponding host name in the other. 
Performance Extensions	useDirectRowUnpack	No	true	alpha	5.1.1	 Use newer result set row unpacking code that skips a copy from network buffers to a MySQL packet instance and instead reads directly into the result set row data buffers. 
Performance Extensions	useDynamicCharsetInfo	No	true	alpha	5.0.6	 Should the driver use a per-connection cache of character set information queried from the server when necessary, or use a built-in static mapping that is more efficient, but isn't aware of custom character sets or character sets implemented after the release of the JDBC driver? 
Performance Extensions	useFastDateParsing	No	true	alpha	5.0.5	 Use internal String-&gt;Date/Time/Timestamp conversion routines to avoid excessive object creation? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Performance Extensions	useFastIntParsing	No	true	alpha	3.1.4	 Use internal String-&gt;Integer conversion routines to avoid excessive object creation? 
Performance Extensions	useJvmCharsetConverters	No	false	alpha	5.0.1	 Always use the character encoding routines built into the JVM, rather than using lookup tables for single-byte character sets? 
Performance Extensions	useReadAheadInput	No	true	alpha	3.1.5	 Use newer, optimized non-blocking, buffered input stream when reading from the server? 
Performance Extensions	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
Performance Extensions	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
Performance Extensions	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
Performance Extensions	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
Performance Extensions	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
Performance Extensions	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
Performance Extensions	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
Performance Extensions	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
Performance Extensions	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
Performance Extensions	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
Performance Extensions	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
Performance Extensions	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
Performance Extensions	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
Performance Extensions	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
Performance Extensions	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
Performance Extensions	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
Performance Extensions	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
Performance Extensions	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
Performance Extensions	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
Performance Extensions	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
Performance Extensions	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
Performance Extensions	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
Performance Extensions	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
Performance Extensions	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
Performance Extensions	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
Performance Extensions	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
Performance Extensions	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Performance Extensions	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Performance Extensions	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Performance Extensions	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Performance Extensions	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Performance Extensions	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Performance Extensions	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Performance Extensions	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Performance Extensions	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Performance Extensions	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Performance Extensions	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Performance Extensions	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Performance Extensions	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Performance Extensions	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Performance Extensions	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Performance Extensions	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Performance Extensions	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Performance Extensions	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Performance Extensions	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Performance Extensions	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Performance Extensions	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Performance Extensions	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Performance Extensions	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Performance Extensions	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Performance Extensions	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Performance Extensions	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Performance Extensions	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Performance Extensions	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Performance Extensions	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Performance Extensions	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Performance Extensions	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Performance Extensions	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Performance Extensions	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Performance Extensions	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Performance Extensions	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Performance Extensions	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Performance Extensions	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Performance Extensions	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Performance Extensions	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Performance Extensions	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Performance Extensions	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Performance Extensions	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Performance Extensions	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Performance Extensions	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Performance Extensions	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Performance Extensions	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Performance Extensions	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Performance Extensions	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Performance Extensions	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Performance Extensions	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Performance Extensions	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Performance Extensions	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Performance Extensions	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Performance Extensions	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Performance Extensions	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Performance Extensions	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Performance Extensions	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Performance Extensions	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Performance Extensions	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Performance Extensions	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Performance Extensions	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Performance Extensions	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Performance Extensions	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Performance Extensions	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Performance Extensions	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Performance Extensions	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Performance Extensions	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Performance Extensions	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Performance Extensions	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Performance Extensions	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Performance Extensions	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Performance Extensions	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Performance Extensions	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Performance Extensions	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Performance Extensions	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Performance Extensions	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Performance Extensions	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Performance Extensions	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Performance Extensions	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Performance Extensions	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Performance Extensions	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Performance Extensions	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Performance Extensions	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Performance Extensions	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Performance Extensions	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Performance Extensions	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Performance Extensions	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
Debugging/Profiling	logger	No	com.mysql.jdbc.log.StandardLogger	0	3.1.1	 The name of a class that implements "com.mysql.jdbc.log.Log" that will be used to log messages to. (default is "com.mysql.jdbc.log.StandardLogger", which logs to STDERR) 
Debugging/Profiling	gatherPerfMetrics	No	false	1	3.1.2	 Should the driver gather performance metrics, and report them via the configured logger every 'reportMetricsIntervalMillis' milliseconds? 
Debugging/Profiling	profileSQL	No	false	1	3.1.0	 Trace queries and their execution/fetch times to the configured logger (true/false) defaults to 'false' 
Debugging/Profiling	profileSql	No		3	2.0.14	 Deprecated, use 'profileSQL' instead. Trace queries and their execution/fetch times on STDERR (true/false) defaults to 'false' 
Debugging/Profiling	reportMetricsIntervalMillis	No	30000	3	3.1.2	 If 'gatherPerfMetrics' is enabled, how often should they be logged (in ms)? 
Debugging/Profiling	maxQuerySizeToLog	No	2048	4	3.1.3	 Controls the maximum length/size of a query that will get logged when profiling or tracing 
Debugging/Profiling	packetDebugBufferSize	No	20	7	3.1.3	 The maximum number of packets to retain when 'enablePacketDebug' is true 
Debugging/Profiling	slowQueryThresholdMillis	No	2000	9	3.1.2	 If 'logSlowQueries' is enabled, how long should a query (in ms) before it is logged as 'slow'? 
Debugging/Profiling	slowQueryThresholdNanos	No	0	10	5.0.7	 If 'useNanosForElapsedTime' is set to true, and this property is set to a non-zero value, the driver will use this threshold (in nanosecond units) to determine if a query was slow. 
Debugging/Profiling	useUsageAdvisor	No	false	10	3.1.1	 Should the driver issue 'usage' warnings advising proper and efficient usage of JDBC and MySQL Connector/J to the log (true/false, defaults to 'false')? 
Debugging/Profiling	autoGenerateTestcaseScript	No	false	alpha	3.1.9	 Should the driver dump the SQL it is executing, including server-side prepared statements to STDERR? 
Debugging/Profiling	autoSlowLog	No	true	alpha	5.1.4	 Instead of using slowQueryThreshold* to determine if a query is slow enough to be logged, maintain statistics that allow the driver to determine queries that are outside the 99th percentile? 
Debugging/Profiling	clientInfoProvider	No	com.mysql.jdbc.JDBC4CommentClientInfoProvider	alpha	5.1.0	 The name of a class that implements the com.mysql.jdbc.JDBC4ClientInfoProvider interface in order to support JDBC-4.0's Connection.get/setClientInfo() methods 
Debugging/Profiling	dumpMetadataOnColumnNotFound	No	false	alpha	3.1.13	 Should the driver dump the field-level metadata of a result set into the exception message when ResultSet.findColumn() fails? 
Debugging/Profiling	dumpQueriesOnException	No	false	alpha	3.1.3	 Should the driver dump the contents of the query sent to the server in the message for SQLExceptions? 
Debugging/Profiling	enablePacketDebug	No	false	alpha	3.1.3	 When enabled, a ring-buffer of 'packetDebugBufferSize' packets will be kept, and dumped when exceptions are thrown in key areas in the driver's code 
Debugging/Profiling	explainSlowQueries	No	false	alpha	3.1.2	 If 'logSlowQueries' is enabled, should the driver automatically issue an 'EXPLAIN' on the server and send the results to the configured log at a WARN level? 
Debugging/Profiling	includeInnodbStatusInDeadlockExceptions	No	false	alpha	5.0.7	 Include the output of "SHOW ENGINE INNODB STATUS" in exception messages when deadlock exceptions are detected? 
Debugging/Profiling	includeThreadDumpInDeadlockExceptions	No	false	alpha	5.1.15	 Include a current Java thread dump in exception messages when deadlock exceptions are detected? 
Debugging/Profiling	includeThreadNamesAsStatementComment	No	false	alpha	5.1.15	 Include the name of the current thread as a comment visible in "SHOW PROCESSLIST", or in Innodb deadlock dumps, useful in correlation with "includeInnodbStatusInDeadlockExceptions=true" and "includeThreadDumpInDeadlockExceptions=true". 
Debugging/Profiling	logSlowQueries	No	false	alpha	3.1.2	 Should queries that take longer than 'slowQueryThresholdMillis' be logged? 
Debugging/Profiling	logXaCommands	No	false	alpha	5.0.5	 Should the driver log XA commands sent by MysqlXaConnection to the server, at the DEBUG level of logging? 
Debugging/Profiling	profilerEventHandler	No	com.mysql.jdbc.profiler.LoggingProfilerEventHandler	alpha	5.1.6	 Name of a class that implements the interface com.mysql.jdbc.profiler.ProfilerEventHandler that will be used to handle profiling/tracing events. 
Debugging/Profiling	resultSetSizeThreshold	No	100	alpha	5.0.5	 If the usage advisor is enabled, how many rows should a result set contain before the driver warns that it is suspiciously large? 
Debugging/Profiling	traceProtocol	No	false	alpha	3.1.2	 Should trace-level network protocol be logged? 
Debugging/Profiling	useNanosForElapsedTime	No	false	alpha	5.0.7	 For profiling/debugging functionality that measures elapsed time, should the driver try to use nanoseconds resolution if available (JDK &gt;= 1.5)? 
Debugging/Profiling	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Debugging/Profiling	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Debugging/Profiling	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Debugging/Profiling	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Debugging/Profiling	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Debugging/Profiling	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Debugging/Profiling	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Debugging/Profiling	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Debugging/Profiling	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Debugging/Profiling	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Debugging/Profiling	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Debugging/Profiling	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Debugging/Profiling	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Debugging/Profiling	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Debugging/Profiling	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Debugging/Profiling	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Debugging/Profiling	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Debugging/Profiling	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Debugging/Profiling	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Debugging/Profiling	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Debugging/Profiling	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Debugging/Profiling	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Debugging/Profiling	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Debugging/Profiling	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Debugging/Profiling	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Debugging/Profiling	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Debugging/Profiling	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Debugging/Profiling	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Debugging/Profiling	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Debugging/Profiling	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Debugging/Profiling	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Debugging/Profiling	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Debugging/Profiling	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Debugging/Profiling	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Debugging/Profiling	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Debugging/Profiling	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Debugging/Profiling	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Debugging/Profiling	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Debugging/Profiling	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Debugging/Profiling	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Debugging/Profiling	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Debugging/Profiling	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Debugging/Profiling	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Debugging/Profiling	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Debugging/Profiling	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Debugging/Profiling	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Debugging/Profiling	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Debugging/Profiling	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Debugging/Profiling	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Debugging/Profiling	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Debugging/Profiling	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Debugging/Profiling	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Debugging/Profiling	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Debugging/Profiling	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Debugging/Profiling	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Debugging/Profiling	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Debugging/Profiling	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Debugging/Profiling	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Debugging/Profiling	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Debugging/Profiling	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Debugging/Profiling	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Debugging/Profiling	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Debugging/Profiling	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Debugging/Profiling	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Debugging/Profiling	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Debugging/Profiling	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Debugging/Profiling	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Debugging/Profiling	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Debugging/Profiling	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Debugging/Profiling	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Debugging/Profiling	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Debugging/Profiling	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Debugging/Profiling	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Debugging/Profiling	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Debugging/Profiling	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Debugging/Profiling	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Debugging/Profiling	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Debugging/Profiling	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Debugging/Profiling	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Debugging/Profiling	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Debugging/Profiling	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Debugging/Profiling	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Debugging/Profiling	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Debugging/Profiling	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Debugging/Profiling	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Debugging/Profiling	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Debugging/Profiling	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
Miscellaneous	useUnicode	No	true	0	1.1g	 Should the driver use Unicode character encodings when handling strings? Should only be used when the driver can't determine the character set mapping, or you are trying to 'force' the driver to use a character set that MySQL either doesn't natively support (such as UTF-8), true/false, defaults to 'true' 
Miscellaneous	characterEncoding	No		5	1.1g	 If 'useUnicode' is set to true, what character encoding should the driver use when dealing with strings? (defaults is to 'autodetect') 
Miscellaneous	characterSetResults	No		6	3.0.13	 Character set to tell the server to return results as. 
Miscellaneous	connectionAttributes	No		7	5.1.25	 A comma-delimited list of user-defined key:value pairs (in addition to standard MySQL-defined key:value pairs) to be passed to MySQL Server for display as connection attributes in the PERFORMANCE_SCHEMA.SESSION_CONNECT_ATTRS table. Example usage: connectionAttributes=key1:value1,key2:value2 This functionality is available for use with MySQL Server version 5.6 or later only. Earlier versions of MySQL Server do not support connection attributes, causing this configuration option to be ignored. Setting connectionAttributes=none will cause connection attribute processing to be bypassed, for situations where Connection creation/initialization speed is critical. 
Miscellaneous	connectionCollation	No		7	3.0.13	 If set, tells the server to use this collation via 'set collation_connection' 
Miscellaneous	useBlobToStoreUTF8OutsideBMP	No	false	128	5.1.3	 Tells the driver to treat [MEDIUM/LONG]BLOB columns as [LONG]VARCHAR columns holding text encoded in UTF-8 that has characters outside the BMP (4-byte encodings), which MySQL server can't handle natively. 
Miscellaneous	utf8OutsideBmpExcludedColumnNamePattern	No		129	5.1.3	 When "useBlobToStoreUTF8OutsideBMP" is set to "true", column names matching the given regex will still be treated as BLOBs unless they match the regex specified for "utf8OutsideBmpIncludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Miscellaneous	utf8OutsideBmpIncludedColumnNamePattern	No		129	5.1.3	 Used to specify exclusion rules to "utf8OutsideBmpExcludedColumnNamePattern". The regex must follow the patterns used for the java.util.regex package. 
Miscellaneous	loadBalanceEnableJMX	No	false	2147483647	5.1.13	 Enables JMX-based management of load-balanced connection groups, including live addition/removal of hosts from load-balancing pool. 
Miscellaneous	loadBalanceHostRemovalGracePeriod	No	15000	2147483647	5.1.39	 Sets the grace period to wait for a host being removed from a load-balanced connection, to be released when it is currently the active host. 
Miscellaneous	sessionVariables	No		2147483647	3.1.8	 A comma or semicolon separated list of name=value pairs to be sent as SET [SESSION] ... to the server when the driver connects. 
Miscellaneous	useColumnNamesInFindColumn	No	false	2147483647	5.1.7	 Prior to JDBC-4.0, the JDBC specification had a bug related to what could be given as a "column name" to ResultSet methods like findColumn(), or getters that took a String property. JDBC-4.0 clarified "column name" to mean the label, as given in an "AS" clause and returned by ResultSetMetaData.getColumnLabel(), and if no AS clause, the column name. Setting this property to "true" will give behavior that is congruent to JDBC-3.0 and earlier versions of the JDBC specification, but which because of the specification bug could give unexpected results. This property is preferred over "useOldAliasMetadataBehavior" unless you need the specific behavior that it provides with respect to ResultSetMetadata. 
Miscellaneous	allowNanAndInf	No	false	alpha	3.1.5	 Should the driver allow NaN or +/- INF values in PreparedStatement.setDouble()? 
Miscellaneous	autoClosePStmtStreams	No	false	alpha	3.1.12	 Should the driver automatically call .close() on streams/readers passed as arguments via set*() methods? 
Miscellaneous	autoDeserialize	No	false	alpha	3.1.5	 Should the driver automatically detect and de-serialize objects stored in BLOB fields? 
Miscellaneous	blobsAreStrings	No	false	alpha	5.0.8	 Should the driver always treat BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Miscellaneous	cacheDefaultTimezone	No	true	alpha	5.1.35	 Caches client's default time zone. This results in better performance when dealing with time zone conversions in Date and Time data types, however it won't be aware of time zone changes if they happen at runtime. 
Miscellaneous	capitalizeTypeNames	No	true	alpha	2.0.7	 Capitalize type names in DatabaseMetaData? (usually only useful when using WebObjects, true/false, defaults to 'false') 
Miscellaneous	clobCharacterEncoding	No		alpha	5.0.0	 The character encoding to use for sending and retrieving TEXT, MEDIUMTEXT and LONGTEXT values instead of the configured connection characterEncoding 
Miscellaneous	clobberStreamingResults	No	false	alpha	3.0.9	 This will cause a 'streaming' ResultSet to be automatically closed, and any outstanding data still streaming from the server to be discarded if another query is executed before all the data has been read from the server. 
Miscellaneous	compensateOnDuplicateKeyUpdateCounts	No	false	alpha	5.1.7	 Should the driver compensate for the update counts of "ON DUPLICATE KEY" INSERT statements (2 = 1, 0 = 1) when using prepared statements? 
Miscellaneous	continueBatchOnError	No	true	alpha	3.0.3	 Should the driver continue processing batch commands if one statement fails. The JDBC spec allows either way (defaults to 'true'). 
Miscellaneous	createDatabaseIfNotExist	No	false	alpha	3.1.9	 Creates the database given in the URL if it doesn't yet exist. Assumes the configured user has permissions to create databases. 
Miscellaneous	detectCustomCollations	No	false	alpha	5.1.29	 Should the driver detect custom charsets/collations installed on server (true/false, defaults to 'false'). If this option set to 'true' driver gets actual charsets/collations from server each time connection establishes. This could slow down connection initialization significantly. 
Miscellaneous	emptyStringsConvertToZero	No	true	alpha	3.1.8	 Should the driver allow conversions from empty string fields to numeric values of '0'? 
Miscellaneous	emulateLocators	No	false	alpha	3.1.0	 Should the driver emulate java.sql.Blobs with locators? With this feature enabled, the driver will delay loading the actual Blob data until the one of the retrieval methods (getInputStream(), getBytes(), and so forth) on the blob data stream has been accessed. For this to work, you must use a column alias with the value of the column to the actual name of the Blob. The feature also has the following restrictions: The SELECT that created the result set must reference only one table, the table must have a primary key; the SELECT must alias the original blob column name, specified as a string, to an alternate name; the SELECT must cover all columns that make up the primary key. 
Miscellaneous	emulateUnsupportedPstmts	No	true	alpha	3.1.7	 Should the driver detect prepared statements that are not supported by the server, and replace them with client-side emulated versions? 
Miscellaneous	exceptionInterceptors	No		alpha	5.1.8	 Comma-delimited list of classes that implement com.mysql.jdbc.ExceptionInterceptor. These classes will be instantiated one per Connection instance, and all SQLExceptions thrown by the driver will be allowed to be intercepted by these interceptors, in a chained fashion, with the first class listed as the head of the chain. 
Miscellaneous	functionsNeverReturnBlobs	No	false	alpha	5.0.8	 Should the driver always treat data from functions returning BLOBs as Strings - specifically to work around dubious metadata returned by the server for GROUP BY clauses? 
Miscellaneous	generateSimpleParameterMetadata	No	false	alpha	5.0.5	 Should the driver generate simplified parameter metadata for PreparedStatements when no metadata is available either because the server couldn't support preparing the statement, or server-side prepared statements are disabled? 
Miscellaneous	getProceduresReturnsFunctions	No	true	alpha	5.1.26	 Pre-JDBC4 DatabaseMetaData API has only the getProcedures() and getProcedureColumns() methods, so they return metadata info for both stored procedures and functions. JDBC4 was extended with the getFunctions() and getFunctionColumns() methods and the expected behaviours of previous methods are not well defined. For JDBC4 and higher, default 'true' value of the option means that calls of DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns() return metadata for both procedures and functions as before, keeping backward compatibility. Setting this property to 'false' decouples Connector/J from its pre-JDBC4 behaviours for DatabaseMetaData.getProcedures() and DatabaseMetaData.getProcedureColumns(), forcing them to return metadata for procedures only. 
Miscellaneous	ignoreNonTxTables	No	false	alpha	3.0.9	 Ignore non-transactional table warning for rollback? (defaults to 'false'). 
Miscellaneous	jdbcCompliantTruncation	No	true	alpha	3.1.2	 Should the driver throw java.sql.DataTruncation exceptions when data is truncated as is required by the JDBC specification when connected to a server that supports warnings (MySQL 4.1.0 and newer)? This property has no effect if the server sql-mode includes STRICT_TRANS_TABLES. 
Miscellaneous	loadBalanceAutoCommitStatementRegex	No		alpha	5.1.15	 When load-balancing is enabled for auto-commit statements (via loadBalanceAutoCommitStatementThreshold), the statement counter will only increment when the SQL matches the regular expression. By default, every statement issued matches. 
Miscellaneous	loadBalanceAutoCommitStatementThreshold	No	0	alpha	5.1.15	 When auto-commit is enabled, the number of statements which should be executed before triggering load-balancing to rebalance. Default value of 0 causes load-balanced connections to only rebalance when exceptions are encountered, or auto-commit is disabled and transactions are explicitly committed or rolled back. 
Miscellaneous	loadBalanceBlacklistTimeout	No	0	alpha	5.1.0	 Time in milliseconds between checks of servers which are unavailable, by controlling how long a server lives in the global blacklist. 
Miscellaneous	loadBalanceConnectionGroup	No		alpha	5.1.13	 Logical group of load-balanced connections within a classloader, used to manage different groups independently. If not specified, live management of load-balanced connections is disabled. 
Miscellaneous	loadBalanceExceptionChecker	No	com.mysql.jdbc.StandardLoadBalanceExceptionChecker	alpha	5.1.13	 Fully-qualified class name of custom exception checker. The class must implement com.mysql.jdbc.LoadBalanceExceptionChecker interface, and is used to inspect SQLExceptions and determine whether they should trigger fail-over to another host in a load-balanced deployment. 
Miscellaneous	loadBalancePingTimeout	No	0	alpha	5.1.13	 Time in milliseconds to wait for ping response from each of load-balanced physical connections when using load-balanced Connection. 
Miscellaneous	loadBalanceSQLExceptionSubclassFailover	No		alpha	5.1.13	 Comma-delimited list of classes/interfaces used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The comparison is done using Class.isInstance(SQLException) using the thrown SQLException. 
Miscellaneous	loadBalanceSQLStateFailover	No		alpha	5.1.13	 Comma-delimited list of SQLState codes used by default load-balanced exception checker to determine whether a given SQLException should trigger failover. The SQLState of a given SQLException is evaluated to determine whether it begins with any value in the comma-delimited list. 
Miscellaneous	loadBalanceValidateConnectionOnSwapServer	No	false	alpha	5.1.13	 Should the load-balanced Connection explicitly check whether the connection is live when swapping to a new physical connection at commit/rollback? 
Miscellaneous	maxRows	No	-1	alpha	all versions	 The maximum number of rows to return (0, the default means return all rows). 
Miscellaneous	netTimeoutForStreamingResults	No	600	alpha	5.1.0	 What value should the driver automatically set the server setting 'net_write_timeout' to when the streaming result sets feature is in use? (value has unit of seconds, the value '0' means the driver will not try and adjust this value) 
Miscellaneous	noAccessToProcedureBodies	No	false	alpha	5.0.3	 When determining procedure parameter types for CallableStatements, and the connected user can't access procedure bodies through "SHOW CREATE PROCEDURE" or select on mysql.proc should the driver instead create basic metadata (all parameters reported as IN VARCHARs, but allowing registerOutParameter() to be called on them anyway) instead of throwing an exception? 
Miscellaneous	noDatetimeStringSync	No	false	alpha	3.1.7	 Don't ensure that ResultSet.getDatetimeType().toString().equals(ResultSet.getString()) 
Miscellaneous	noTimezoneConversionForDateType	No	true	alpha	5.1.35	 Don't convert DATE values using the server time zone if 'useTimezone'='true' or 'useLegacyDatetimeCode'='false' 
Miscellaneous	noTimezoneConversionForTimeType	No	false	alpha	5.0.0	 Don't convert TIME values using the server time zone if 'useTimezone'='true' 
Miscellaneous	nullCatalogMeansCurrent	No	true	alpha	3.1.8	 When DatabaseMetadataMethods ask for a 'catalog' parameter, does the value null mean use the current catalog? (this is not JDBC-compliant, but follows legacy behavior from earlier versions of the driver) 
Miscellaneous	nullNamePatternMatchesAll	No	true	alpha	3.1.8	 Should DatabaseMetaData methods that accept *pattern parameters treat null the same as '%' (this is not JDBC-compliant, however older versions of the driver accepted this departure from the specification) 
Miscellaneous	overrideSupportsIntegrityEnhancementFacility	No	false	alpha	3.1.12	 Should the driver return "true" for DatabaseMetaData.supportsIntegrityEnhancementFacility() even if the database doesn't support it to workaround applications that require this method to return "true" to signal support of foreign keys, even though the SQL specification states that this facility contains much more than just foreign key support (one such application being OpenOffice)? 
Miscellaneous	padCharsWithSpace	No	false	alpha	5.0.6	 If a result set column has the CHAR type and the value does not fill the amount of characters specified in the DDL for the column, should the driver pad the remaining characters with space (for ANSI compliance)? 
Miscellaneous	pedantic	No	false	alpha	3.0.0	 Follow the JDBC spec to the letter. 
Miscellaneous	pinGlobalTxToPhysicalConnection	No	false	alpha	5.0.1	 When using XAConnections, should the driver ensure that operations on a given XID are always routed to the same physical connection? This allows the XAConnection to support "XA START ... JOIN" after "XA END" has been called 
Miscellaneous	populateInsertRowWithDefaultValues	No	false	alpha	5.0.5	 When using ResultSets that are CONCUR_UPDATABLE, should the driver pre-populate the "insert" row with default values from the DDL for the table used in the query so those values are immediately available for ResultSet accessors? This functionality requires a call to the database for metadata each time a result set of this type is created. If disabled (the default), the default values will be populated by the an internal call to refreshRow() which pulls back default values and/or values changed by triggers. 
Miscellaneous	processEscapeCodesForPrepStmts	No	true	alpha	3.1.12	 Should the driver process escape codes in queries that are prepared? Default escape processing behavior in non-prepared statements must be defined with the property 'enableEscapeProcessing'. 
Miscellaneous	queryTimeoutKillsConnection	No	false	alpha	5.1.9	 If the timeout given in Statement.setQueryTimeout() expires, should the driver forcibly abort the Connection instead of attempting to abort the query? 
Miscellaneous	relaxAutoCommit	No	false	alpha	2.0.13	 If the version of MySQL the driver connects to does not support transactions, still allow calls to commit(), rollback() and setAutoCommit() (true/false, defaults to 'false')? 
Miscellaneous	retainStatementAfterResultSetClose	No	false	alpha	3.1.11	 Should the driver retain the Statement reference in a ResultSet after ResultSet.close() has been called. This is not JDBC-compliant after JDBC-4.0. 
Miscellaneous	rollbackOnPooledClose	No	true	alpha	3.0.15	 Should the driver issue a rollback() when the logical connection in a pool is closed? 
Miscellaneous	runningCTS13	No	false	alpha	3.1.7	 Enables workarounds for bugs in Sun's JDBC compliance testsuite version 1.3 
Miscellaneous	sendFractionalSeconds	No	true	alpha	5.1.37	 Send fractional part from TIMESTAMP seconds. If set to false, the nanoseconds value of TIMESTAMP values will be truncated before sending any data to the server. This option applies only to prepared statements, callable statements or updatable result sets. 
Miscellaneous	serverTimezone	No		alpha	3.0.2	 Override detection/mapping of time zone. Used when time zone from server doesn't map to Java time zone 
Miscellaneous	statementInterceptors	No		alpha	5.1.1	 A comma-delimited list of classes that implement "com.mysql.jdbc.StatementInterceptor" that should be placed "in between" query execution to influence the results. StatementInterceptors are "chainable", the results returned by the "current" interceptor will be passed on to the next in in the chain, from left-to-right order, as specified in this property. 
Miscellaneous	strictFloatingPoint	No	false	alpha	3.0.0	 Used only in older versions of compliance test 
Miscellaneous	strictUpdates	No	true	alpha	3.0.4	 Should the driver do strict checking (all primary keys selected) of updatable result sets (true, false, defaults to 'true')? 
Miscellaneous	tinyInt1isBit	No	true	alpha	3.0.16	 Should the driver treat the datatype TINYINT(1) as the BIT type (because the server silently converts BIT -&gt; TINYINT(1) when creating tables)? 
Miscellaneous	transformedBitIsBoolean	No	false	alpha	3.1.9	 If the driver converts TINYINT(1) to a different type, should it use BOOLEAN instead of BIT for future compatibility with MySQL-5.0, as MySQL-5.0 has a BIT type? 
Miscellaneous	treatUtilDateAsTimestamp	No	true	alpha	5.0.5	 Should the driver treat java.util.Date as a TIMESTAMP for the purposes of PreparedStatement.setObject()? 
Miscellaneous	ultraDevHack	No	false	alpha	2.0.3	 Create PreparedStatements for prepareCall() when required, because UltraDev is broken and issues a prepareCall() for _all_ statements? (true/false, defaults to 'false') 
Miscellaneous	useAffectedRows	No	false	alpha	5.1.7	 Don't set the CLIENT_FOUND_ROWS flag when connecting to the server (not JDBC-compliant, will break most applications that rely on "found" rows vs. "affected rows" for DML statements), but does cause "correct" update counts from "INSERT ... ON DUPLICATE KEY UPDATE" statements to be returned by the server. 
Miscellaneous	useGmtMillisForDatetimes	No	false	alpha	3.1.12	 Convert between session time zone and GMT before creating Date and Timestamp instances (value of 'false' leads to legacy behavior, 'true' leads to more JDBC-compliant behavior)? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Miscellaneous	useHostsInPrivileges	No	true	alpha	3.0.2	 Add '@hostname' to users in DatabaseMetaData.getColumn/TablePrivileges() (true/false), defaults to 'true'. 
Miscellaneous	useInformationSchema	No	false	alpha	5.0.0	 When connected to MySQL-5.0.7 or newer, should the driver use the INFORMATION_SCHEMA to derive information used by DatabaseMetaData? 
Miscellaneous	useJDBCCompliantTimezoneShift	No	false	alpha	5.0.0	 Should the driver use JDBC-compliant rules when converting TIME/TIMESTAMP/DATETIME values' time zone information for those JDBC arguments which take a java.util.Calendar argument? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Miscellaneous	useLegacyDatetimeCode	No	true	alpha	5.1.6	 Use code for DATE/TIME/DATETIME/TIMESTAMP handling in result sets and statements that consistently handles time zone conversions from client to server and back again, or use the legacy code for these datatypes that has been in the driver for backwards-compatibility? Setting this property to 'false' voids the effects of "useTimezone," "useJDBCCompliantTimezoneShift," "useGmtMillisForDatetimes," and "useFastDateParsing." 
Miscellaneous	useOldAliasMetadataBehavior	No	false	alpha	5.0.4	 Should the driver use the legacy behavior for "AS" clauses on columns and tables, and only return aliases (if any) for ResultSetMetaData.getColumnName() or ResultSetMetaData.getTableName() rather than the original column/table name? In 5.0.x, the default value was true. 
Miscellaneous	useOldUTF8Behavior	No	false	alpha	3.1.6	 Use the UTF-8 behavior the driver did when communicating with 4.0 and older servers 
Miscellaneous	useOnlyServerErrorMessages	No	true	alpha	3.0.15	 Don't prepend 'standard' SQLState error messages to error messages returned by the server. 
Miscellaneous	useSSPSCompatibleTimezoneShift	No	false	alpha	5.0.5	 If migrating from an environment that was using server-side prepared statements, and the configuration property "useJDBCCompliantTimeZoneShift" set to "true", use compatible behavior when not using server-side prepared statements when sending TIMESTAMP values to the MySQL server. 
Miscellaneous	useServerPrepStmts	No	false	alpha	3.1.0	 Use server-side prepared statements if the server supports them? 
Miscellaneous	useSqlStateCodes	No	true	alpha	3.1.3	 Use SQL Standard state codes instead of 'legacy' X/Open/SQL state codes (true/false), default is 'true' 
Miscellaneous	useStreamLengthsInPrepStmts	No	true	alpha	3.0.2	 Honor stream length parameter in PreparedStatement/ResultSet.setXXXStream() method calls (true/false, defaults to 'true')? 
Miscellaneous	useTimezone	No	false	alpha	3.0.2	 Convert time/date types between client and server time zones (true/false, defaults to 'false')? This is part of the legacy date-time code, thus the property has an effect only when "useLegacyDatetimeCode=true." 
Miscellaneous	useUnbufferedInput	No	true	alpha	3.0.11	 Don't use BufferedInputStream for reading data from the server 
Miscellaneous	yearIsDateType	No	true	alpha	3.1.9	 Should the JDBC driver treat the MySQL type "YEAR" as a java.sql.Date, or as a SHORT? 
Miscellaneous	zeroDateTimeBehavior	No	exception	alpha	3.1.4	 What should happen when the driver encounters DATETIME values that are composed entirely of zeros (used by MySQL to represent invalid dates)? Valid values are "exception", "round" and "convertToNull". 
